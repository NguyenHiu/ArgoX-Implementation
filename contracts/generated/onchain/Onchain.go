// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package onchain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// OnchainBatch is an auto generated low-level Go binding around an user-defined struct.
type OnchainBatch struct {
	BatchID   [16]byte
	Price     *big.Int
	Amount    *big.Int
	Side      bool
	Owner     common.Address
	Signature []byte
	Time      *big.Int
}

// OnchainOrder is an auto generated low-level Go binding around an user-defined struct.
type OnchainOrder struct {
	Price             *big.Int
	Amount            *big.Int
	Side              bool
	From              [16]byte
	TradeHash         [32]byte
	OriginalOrderHash [32]byte
}

// OnchainMetaData contains all meta data concerning the Onchain contract.
var OnchainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"AcceptBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"FullfilMatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"InvalidBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"InvalidOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"LogBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"LogBytes16\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumECDSA.RecoverError\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"LogRecoverError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"LogString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"PartialMatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PunishMatcher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"ReceivedBatchDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"RemoveBatchOutOfDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"RevertBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetAskOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"structOnchain.Batch[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetBidOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"structOnchain.Batch[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"}],\"name\":\"deleteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWaitingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m\",\"type\":\"address\"}],\"name\":\"isMatcher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"}],\"name\":\"reportMissingDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"name\":\"sendBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"bytes16\",\"name\":\"from\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"originalOrderHash\",\"type\":\"bytes32\"}],\"internalType\":\"structOnchain.Order[]\",\"name\":\"_ords\",\"type\":\"tuple[]\"}],\"name\":\"submitOrderDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// OnchainABI is the input ABI used to generate the binding from.
// Deprecated: Use OnchainMetaData.ABI instead.
var OnchainABI = OnchainMetaData.ABI

// OnchainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OnchainMetaData.Bin instead.
var OnchainBin = OnchainMetaData.Bin

// DeployOnchain deploys a new Ethereum contract, binding an instance of Onchain to it.
func DeployOnchain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Onchain, error) {
	parsed, err := OnchainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OnchainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Onchain{OnchainCaller: OnchainCaller{contract: contract}, OnchainTransactor: OnchainTransactor{contract: contract}, OnchainFilterer: OnchainFilterer{contract: contract}}, nil
}

// Onchain is an auto generated Go binding around an Ethereum contract.
type Onchain struct {
	OnchainCaller     // Read-only binding to the contract
	OnchainTransactor // Write-only binding to the contract
	OnchainFilterer   // Log filterer for contract events
}

// OnchainCaller is an auto generated read-only Go binding around an Ethereum contract.
type OnchainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OnchainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OnchainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OnchainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OnchainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OnchainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OnchainSession struct {
	Contract     *Onchain          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OnchainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OnchainCallerSession struct {
	Contract *OnchainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OnchainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OnchainTransactorSession struct {
	Contract     *OnchainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OnchainRaw is an auto generated low-level Go binding around an Ethereum contract.
type OnchainRaw struct {
	Contract *Onchain // Generic contract binding to access the raw methods on
}

// OnchainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OnchainCallerRaw struct {
	Contract *OnchainCaller // Generic read-only contract binding to access the raw methods on
}

// OnchainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OnchainTransactorRaw struct {
	Contract *OnchainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOnchain creates a new instance of Onchain, bound to a specific deployed contract.
func NewOnchain(address common.Address, backend bind.ContractBackend) (*Onchain, error) {
	contract, err := bindOnchain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Onchain{OnchainCaller: OnchainCaller{contract: contract}, OnchainTransactor: OnchainTransactor{contract: contract}, OnchainFilterer: OnchainFilterer{contract: contract}}, nil
}

// NewOnchainCaller creates a new read-only instance of Onchain, bound to a specific deployed contract.
func NewOnchainCaller(address common.Address, caller bind.ContractCaller) (*OnchainCaller, error) {
	contract, err := bindOnchain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OnchainCaller{contract: contract}, nil
}

// NewOnchainTransactor creates a new write-only instance of Onchain, bound to a specific deployed contract.
func NewOnchainTransactor(address common.Address, transactor bind.ContractTransactor) (*OnchainTransactor, error) {
	contract, err := bindOnchain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OnchainTransactor{contract: contract}, nil
}

// NewOnchainFilterer creates a new log filterer instance of Onchain, bound to a specific deployed contract.
func NewOnchainFilterer(address common.Address, filterer bind.ContractFilterer) (*OnchainFilterer, error) {
	contract, err := bindOnchain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OnchainFilterer{contract: contract}, nil
}

// bindOnchain binds a generic wrapper to an already deployed contract.
func bindOnchain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OnchainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Onchain *OnchainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Onchain.Contract.OnchainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Onchain *OnchainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Onchain.Contract.OnchainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Onchain *OnchainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Onchain.Contract.OnchainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Onchain *OnchainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Onchain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Onchain *OnchainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Onchain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Onchain *OnchainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Onchain.Contract.contract.Transact(opts, method, params...)
}

// GetAskOrders is a free data retrieval call binding the contract method 0x8545dca2.
//
// Solidity: function GetAskOrders() view returns((bytes16,uint256,uint256,bool,address,bytes,uint256)[])
func (_Onchain *OnchainCaller) GetAskOrders(opts *bind.CallOpts) ([]OnchainBatch, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "GetAskOrders")

	if err != nil {
		return *new([]OnchainBatch), err
	}

	out0 := *abi.ConvertType(out[0], new([]OnchainBatch)).(*[]OnchainBatch)

	return out0, err

}

// GetAskOrders is a free data retrieval call binding the contract method 0x8545dca2.
//
// Solidity: function GetAskOrders() view returns((bytes16,uint256,uint256,bool,address,bytes,uint256)[])
func (_Onchain *OnchainSession) GetAskOrders() ([]OnchainBatch, error) {
	return _Onchain.Contract.GetAskOrders(&_Onchain.CallOpts)
}

// GetAskOrders is a free data retrieval call binding the contract method 0x8545dca2.
//
// Solidity: function GetAskOrders() view returns((bytes16,uint256,uint256,bool,address,bytes,uint256)[])
func (_Onchain *OnchainCallerSession) GetAskOrders() ([]OnchainBatch, error) {
	return _Onchain.Contract.GetAskOrders(&_Onchain.CallOpts)
}

// GetBidOrders is a free data retrieval call binding the contract method 0x55a33968.
//
// Solidity: function GetBidOrders() view returns((bytes16,uint256,uint256,bool,address,bytes,uint256)[])
func (_Onchain *OnchainCaller) GetBidOrders(opts *bind.CallOpts) ([]OnchainBatch, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "GetBidOrders")

	if err != nil {
		return *new([]OnchainBatch), err
	}

	out0 := *abi.ConvertType(out[0], new([]OnchainBatch)).(*[]OnchainBatch)

	return out0, err

}

// GetBidOrders is a free data retrieval call binding the contract method 0x55a33968.
//
// Solidity: function GetBidOrders() view returns((bytes16,uint256,uint256,bool,address,bytes,uint256)[])
func (_Onchain *OnchainSession) GetBidOrders() ([]OnchainBatch, error) {
	return _Onchain.Contract.GetBidOrders(&_Onchain.CallOpts)
}

// GetBidOrders is a free data retrieval call binding the contract method 0x55a33968.
//
// Solidity: function GetBidOrders() view returns((bytes16,uint256,uint256,bool,address,bytes,uint256)[])
func (_Onchain *OnchainCallerSession) GetBidOrders() ([]OnchainBatch, error) {
	return _Onchain.Contract.GetBidOrders(&_Onchain.CallOpts)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address _addr) pure returns(string)
func (_Onchain *OnchainCaller) AddressToString(opts *bind.CallOpts, _addr common.Address) (string, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "addressToString", _addr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address _addr) pure returns(string)
func (_Onchain *OnchainSession) AddressToString(_addr common.Address) (string, error) {
	return _Onchain.Contract.AddressToString(&_Onchain.CallOpts, _addr)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address _addr) pure returns(string)
func (_Onchain *OnchainCallerSession) AddressToString(_addr common.Address) (string, error) {
	return _Onchain.Contract.AddressToString(&_Onchain.CallOpts, _addr)
}

// GetRegisterFee is a free data retrieval call binding the contract method 0x32a58e79.
//
// Solidity: function getRegisterFee() view returns(uint256)
func (_Onchain *OnchainCaller) GetRegisterFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "getRegisterFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRegisterFee is a free data retrieval call binding the contract method 0x32a58e79.
//
// Solidity: function getRegisterFee() view returns(uint256)
func (_Onchain *OnchainSession) GetRegisterFee() (*big.Int, error) {
	return _Onchain.Contract.GetRegisterFee(&_Onchain.CallOpts)
}

// GetRegisterFee is a free data retrieval call binding the contract method 0x32a58e79.
//
// Solidity: function getRegisterFee() view returns(uint256)
func (_Onchain *OnchainCallerSession) GetRegisterFee() (*big.Int, error) {
	return _Onchain.Contract.GetRegisterFee(&_Onchain.CallOpts)
}

// GetWaitingTime is a free data retrieval call binding the contract method 0x4dcbd09b.
//
// Solidity: function getWaitingTime() view returns(uint256)
func (_Onchain *OnchainCaller) GetWaitingTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "getWaitingTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWaitingTime is a free data retrieval call binding the contract method 0x4dcbd09b.
//
// Solidity: function getWaitingTime() view returns(uint256)
func (_Onchain *OnchainSession) GetWaitingTime() (*big.Int, error) {
	return _Onchain.Contract.GetWaitingTime(&_Onchain.CallOpts)
}

// GetWaitingTime is a free data retrieval call binding the contract method 0x4dcbd09b.
//
// Solidity: function getWaitingTime() view returns(uint256)
func (_Onchain *OnchainCallerSession) GetWaitingTime() (*big.Int, error) {
	return _Onchain.Contract.GetWaitingTime(&_Onchain.CallOpts)
}

// IsMatcher is a free data retrieval call binding the contract method 0x36ee6749.
//
// Solidity: function isMatcher(address _m) view returns(bool)
func (_Onchain *OnchainCaller) IsMatcher(opts *bind.CallOpts, _m common.Address) (bool, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "isMatcher", _m)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMatcher is a free data retrieval call binding the contract method 0x36ee6749.
//
// Solidity: function isMatcher(address _m) view returns(bool)
func (_Onchain *OnchainSession) IsMatcher(_m common.Address) (bool, error) {
	return _Onchain.Contract.IsMatcher(&_Onchain.CallOpts, _m)
}

// IsMatcher is a free data retrieval call binding the contract method 0x36ee6749.
//
// Solidity: function isMatcher(address _m) view returns(bool)
func (_Onchain *OnchainCallerSession) IsMatcher(_m common.Address) (bool, error) {
	return _Onchain.Contract.IsMatcher(&_Onchain.CallOpts, _m)
}

// IsPending is a free data retrieval call binding the contract method 0x19f5e9fe.
//
// Solidity: function isPending(bytes16 batchID) view returns(bool)
func (_Onchain *OnchainCaller) IsPending(opts *bind.CallOpts, batchID [16]byte) (bool, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "isPending", batchID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0x19f5e9fe.
//
// Solidity: function isPending(bytes16 batchID) view returns(bool)
func (_Onchain *OnchainSession) IsPending(batchID [16]byte) (bool, error) {
	return _Onchain.Contract.IsPending(&_Onchain.CallOpts, batchID)
}

// IsPending is a free data retrieval call binding the contract method 0x19f5e9fe.
//
// Solidity: function isPending(bytes16 batchID) view returns(bool)
func (_Onchain *OnchainCallerSession) IsPending(batchID [16]byte) (bool, error) {
	return _Onchain.Contract.IsPending(&_Onchain.CallOpts, batchID)
}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 num) pure returns(string)
func (_Onchain *OnchainCaller) UintToString(opts *bind.CallOpts, num *big.Int) (string, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "uintToString", num)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 num) pure returns(string)
func (_Onchain *OnchainSession) UintToString(num *big.Int) (string, error) {
	return _Onchain.Contract.UintToString(&_Onchain.CallOpts, num)
}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 num) pure returns(string)
func (_Onchain *OnchainCallerSession) UintToString(num *big.Int) (string, error) {
	return _Onchain.Contract.UintToString(&_Onchain.CallOpts, num)
}

// DeleteBatch is a paid mutator transaction binding the contract method 0xb29e6299.
//
// Solidity: function deleteBatch(bytes16 batchID) returns()
func (_Onchain *OnchainTransactor) DeleteBatch(opts *bind.TransactOpts, batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "deleteBatch", batchID)
}

// DeleteBatch is a paid mutator transaction binding the contract method 0xb29e6299.
//
// Solidity: function deleteBatch(bytes16 batchID) returns()
func (_Onchain *OnchainSession) DeleteBatch(batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.DeleteBatch(&_Onchain.TransactOpts, batchID)
}

// DeleteBatch is a paid mutator transaction binding the contract method 0xb29e6299.
//
// Solidity: function deleteBatch(bytes16 batchID) returns()
func (_Onchain *OnchainTransactorSession) DeleteBatch(batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.DeleteBatch(&_Onchain.TransactOpts, batchID)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address _m) payable returns()
func (_Onchain *OnchainTransactor) Register(opts *bind.TransactOpts, _m common.Address) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "register", _m)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address _m) payable returns()
func (_Onchain *OnchainSession) Register(_m common.Address) (*types.Transaction, error) {
	return _Onchain.Contract.Register(&_Onchain.TransactOpts, _m)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address _m) payable returns()
func (_Onchain *OnchainTransactorSession) Register(_m common.Address) (*types.Transaction, error) {
	return _Onchain.Contract.Register(&_Onchain.TransactOpts, _m)
}

// ReportMissingDeadline is a paid mutator transaction binding the contract method 0x78b32cf5.
//
// Solidity: function reportMissingDeadline(bytes16 batchID) returns()
func (_Onchain *OnchainTransactor) ReportMissingDeadline(opts *bind.TransactOpts, batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "reportMissingDeadline", batchID)
}

// ReportMissingDeadline is a paid mutator transaction binding the contract method 0x78b32cf5.
//
// Solidity: function reportMissingDeadline(bytes16 batchID) returns()
func (_Onchain *OnchainSession) ReportMissingDeadline(batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.ReportMissingDeadline(&_Onchain.TransactOpts, batchID)
}

// ReportMissingDeadline is a paid mutator transaction binding the contract method 0x78b32cf5.
//
// Solidity: function reportMissingDeadline(bytes16 batchID) returns()
func (_Onchain *OnchainTransactorSession) ReportMissingDeadline(batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.ReportMissingDeadline(&_Onchain.TransactOpts, batchID)
}

// SendBatch is a paid mutator transaction binding the contract method 0x3005d34c.
//
// Solidity: function sendBatch(bytes16 batchID, uint256 price, uint256 amount, bool side, address owner, bytes sign) returns()
func (_Onchain *OnchainTransactor) SendBatch(opts *bind.TransactOpts, batchID [16]byte, price *big.Int, amount *big.Int, side bool, owner common.Address, sign []byte) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "sendBatch", batchID, price, amount, side, owner, sign)
}

// SendBatch is a paid mutator transaction binding the contract method 0x3005d34c.
//
// Solidity: function sendBatch(bytes16 batchID, uint256 price, uint256 amount, bool side, address owner, bytes sign) returns()
func (_Onchain *OnchainSession) SendBatch(batchID [16]byte, price *big.Int, amount *big.Int, side bool, owner common.Address, sign []byte) (*types.Transaction, error) {
	return _Onchain.Contract.SendBatch(&_Onchain.TransactOpts, batchID, price, amount, side, owner, sign)
}

// SendBatch is a paid mutator transaction binding the contract method 0x3005d34c.
//
// Solidity: function sendBatch(bytes16 batchID, uint256 price, uint256 amount, bool side, address owner, bytes sign) returns()
func (_Onchain *OnchainTransactorSession) SendBatch(batchID [16]byte, price *big.Int, amount *big.Int, side bool, owner common.Address, sign []byte) (*types.Transaction, error) {
	return _Onchain.Contract.SendBatch(&_Onchain.TransactOpts, batchID, price, amount, side, owner, sign)
}

// SubmitOrderDetails is a paid mutator transaction binding the contract method 0x85d8a4e6.
//
// Solidity: function submitOrderDetails(bytes16 batchID, (uint256,uint256,bool,bytes16,bytes32,bytes32)[] _ords) returns()
func (_Onchain *OnchainTransactor) SubmitOrderDetails(opts *bind.TransactOpts, batchID [16]byte, _ords []OnchainOrder) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "submitOrderDetails", batchID, _ords)
}

// SubmitOrderDetails is a paid mutator transaction binding the contract method 0x85d8a4e6.
//
// Solidity: function submitOrderDetails(bytes16 batchID, (uint256,uint256,bool,bytes16,bytes32,bytes32)[] _ords) returns()
func (_Onchain *OnchainSession) SubmitOrderDetails(batchID [16]byte, _ords []OnchainOrder) (*types.Transaction, error) {
	return _Onchain.Contract.SubmitOrderDetails(&_Onchain.TransactOpts, batchID, _ords)
}

// SubmitOrderDetails is a paid mutator transaction binding the contract method 0x85d8a4e6.
//
// Solidity: function submitOrderDetails(bytes16 batchID, (uint256,uint256,bool,bytes16,bytes32,bytes32)[] _ords) returns()
func (_Onchain *OnchainTransactorSession) SubmitOrderDetails(batchID [16]byte, _ords []OnchainOrder) (*types.Transaction, error) {
	return _Onchain.Contract.SubmitOrderDetails(&_Onchain.TransactOpts, batchID, _ords)
}

// UpdateBatch is a paid mutator transaction binding the contract method 0x82736cd7.
//
// Solidity: function updateBatch(bytes16 batchID, uint256 amount) returns()
func (_Onchain *OnchainTransactor) UpdateBatch(opts *bind.TransactOpts, batchID [16]byte, amount *big.Int) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "updateBatch", batchID, amount)
}

// UpdateBatch is a paid mutator transaction binding the contract method 0x82736cd7.
//
// Solidity: function updateBatch(bytes16 batchID, uint256 amount) returns()
func (_Onchain *OnchainSession) UpdateBatch(batchID [16]byte, amount *big.Int) (*types.Transaction, error) {
	return _Onchain.Contract.UpdateBatch(&_Onchain.TransactOpts, batchID, amount)
}

// UpdateBatch is a paid mutator transaction binding the contract method 0x82736cd7.
//
// Solidity: function updateBatch(bytes16 batchID, uint256 amount) returns()
func (_Onchain *OnchainTransactorSession) UpdateBatch(batchID [16]byte, amount *big.Int) (*types.Transaction, error) {
	return _Onchain.Contract.UpdateBatch(&_Onchain.TransactOpts, batchID, amount)
}

// OnchainAcceptBatchIterator is returned from FilterAcceptBatch and is used to iterate over the raw logs and unpacked data for AcceptBatch events raised by the Onchain contract.
type OnchainAcceptBatchIterator struct {
	Event *OnchainAcceptBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainAcceptBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainAcceptBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainAcceptBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainAcceptBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainAcceptBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainAcceptBatch represents a AcceptBatch event raised by the Onchain contract.
type OnchainAcceptBatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAcceptBatch is a free log retrieval operation binding the contract event 0x48ecfbdd39de4d68f2a28458698ce634ea21a4083a608e845c14122c9d70bc0d.
//
// Solidity: event AcceptBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterAcceptBatch(opts *bind.FilterOpts) (*OnchainAcceptBatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "AcceptBatch")
	if err != nil {
		return nil, err
	}
	return &OnchainAcceptBatchIterator{contract: _Onchain.contract, event: "AcceptBatch", logs: logs, sub: sub}, nil
}

// WatchAcceptBatch is a free log subscription operation binding the contract event 0x48ecfbdd39de4d68f2a28458698ce634ea21a4083a608e845c14122c9d70bc0d.
//
// Solidity: event AcceptBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchAcceptBatch(opts *bind.WatchOpts, sink chan<- *OnchainAcceptBatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "AcceptBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainAcceptBatch)
				if err := _Onchain.contract.UnpackLog(event, "AcceptBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptBatch is a log parse operation binding the contract event 0x48ecfbdd39de4d68f2a28458698ce634ea21a4083a608e845c14122c9d70bc0d.
//
// Solidity: event AcceptBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseAcceptBatch(log types.Log) (*OnchainAcceptBatch, error) {
	event := new(OnchainAcceptBatch)
	if err := _Onchain.contract.UnpackLog(event, "AcceptBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainFullfilMatchIterator is returned from FilterFullfilMatch and is used to iterate over the raw logs and unpacked data for FullfilMatch events raised by the Onchain contract.
type OnchainFullfilMatchIterator struct {
	Event *OnchainFullfilMatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainFullfilMatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainFullfilMatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainFullfilMatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainFullfilMatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainFullfilMatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainFullfilMatch represents a FullfilMatch event raised by the Onchain contract.
type OnchainFullfilMatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterFullfilMatch is a free log retrieval operation binding the contract event 0x57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965.
//
// Solidity: event FullfilMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterFullfilMatch(opts *bind.FilterOpts) (*OnchainFullfilMatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "FullfilMatch")
	if err != nil {
		return nil, err
	}
	return &OnchainFullfilMatchIterator{contract: _Onchain.contract, event: "FullfilMatch", logs: logs, sub: sub}, nil
}

// WatchFullfilMatch is a free log subscription operation binding the contract event 0x57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965.
//
// Solidity: event FullfilMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchFullfilMatch(opts *bind.WatchOpts, sink chan<- *OnchainFullfilMatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "FullfilMatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainFullfilMatch)
				if err := _Onchain.contract.UnpackLog(event, "FullfilMatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullfilMatch is a log parse operation binding the contract event 0x57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965.
//
// Solidity: event FullfilMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseFullfilMatch(log types.Log) (*OnchainFullfilMatch, error) {
	event := new(OnchainFullfilMatch)
	if err := _Onchain.contract.UnpackLog(event, "FullfilMatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainInvalidBatchIterator is returned from FilterInvalidBatch and is used to iterate over the raw logs and unpacked data for InvalidBatch events raised by the Onchain contract.
type OnchainInvalidBatchIterator struct {
	Event *OnchainInvalidBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainInvalidBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainInvalidBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainInvalidBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainInvalidBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainInvalidBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainInvalidBatch represents a InvalidBatch event raised by the Onchain contract.
type OnchainInvalidBatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterInvalidBatch is a free log retrieval operation binding the contract event 0xe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad748.
//
// Solidity: event InvalidBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterInvalidBatch(opts *bind.FilterOpts) (*OnchainInvalidBatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "InvalidBatch")
	if err != nil {
		return nil, err
	}
	return &OnchainInvalidBatchIterator{contract: _Onchain.contract, event: "InvalidBatch", logs: logs, sub: sub}, nil
}

// WatchInvalidBatch is a free log subscription operation binding the contract event 0xe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad748.
//
// Solidity: event InvalidBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchInvalidBatch(opts *bind.WatchOpts, sink chan<- *OnchainInvalidBatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "InvalidBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainInvalidBatch)
				if err := _Onchain.contract.UnpackLog(event, "InvalidBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidBatch is a log parse operation binding the contract event 0xe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad748.
//
// Solidity: event InvalidBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseInvalidBatch(log types.Log) (*OnchainInvalidBatch, error) {
	event := new(OnchainInvalidBatch)
	if err := _Onchain.contract.UnpackLog(event, "InvalidBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainInvalidOrderIterator is returned from FilterInvalidOrder and is used to iterate over the raw logs and unpacked data for InvalidOrder events raised by the Onchain contract.
type OnchainInvalidOrderIterator struct {
	Event *OnchainInvalidOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainInvalidOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainInvalidOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainInvalidOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainInvalidOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainInvalidOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainInvalidOrder represents a InvalidOrder event raised by the Onchain contract.
type OnchainInvalidOrder struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterInvalidOrder is a free log retrieval operation binding the contract event 0xbadcacd8461f108d807dc434f432301d58e336cb63f5ce877e5e6a9298785447.
//
// Solidity: event InvalidOrder(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterInvalidOrder(opts *bind.FilterOpts) (*OnchainInvalidOrderIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "InvalidOrder")
	if err != nil {
		return nil, err
	}
	return &OnchainInvalidOrderIterator{contract: _Onchain.contract, event: "InvalidOrder", logs: logs, sub: sub}, nil
}

// WatchInvalidOrder is a free log subscription operation binding the contract event 0xbadcacd8461f108d807dc434f432301d58e336cb63f5ce877e5e6a9298785447.
//
// Solidity: event InvalidOrder(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchInvalidOrder(opts *bind.WatchOpts, sink chan<- *OnchainInvalidOrder) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "InvalidOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainInvalidOrder)
				if err := _Onchain.contract.UnpackLog(event, "InvalidOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidOrder is a log parse operation binding the contract event 0xbadcacd8461f108d807dc434f432301d58e336cb63f5ce877e5e6a9298785447.
//
// Solidity: event InvalidOrder(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseInvalidOrder(log types.Log) (*OnchainInvalidOrder, error) {
	event := new(OnchainInvalidOrder)
	if err := _Onchain.contract.UnpackLog(event, "InvalidOrder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Onchain contract.
type OnchainLogAddressIterator struct {
	Event *OnchainLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogAddress represents a LogAddress event raised by the Onchain contract.
type OnchainLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0xb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a284.
//
// Solidity: event LogAddress(address arg0)
func (_Onchain *OnchainFilterer) FilterLogAddress(opts *bind.FilterOpts) (*OnchainLogAddressIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &OnchainLogAddressIterator{contract: _Onchain.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0xb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a284.
//
// Solidity: event LogAddress(address arg0)
func (_Onchain *OnchainFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *OnchainLogAddress) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogAddress)
				if err := _Onchain.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0xb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a284.
//
// Solidity: event LogAddress(address arg0)
func (_Onchain *OnchainFilterer) ParseLogAddress(log types.Log) (*OnchainLogAddress, error) {
	event := new(OnchainLogAddress)
	if err := _Onchain.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the Onchain contract.
type OnchainLogBytesIterator struct {
	Event *OnchainLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogBytes represents a LogBytes event raised by the Onchain contract.
type OnchainLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a5.
//
// Solidity: event LogBytes(bytes arg0)
func (_Onchain *OnchainFilterer) FilterLogBytes(opts *bind.FilterOpts) (*OnchainLogBytesIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogBytes")
	if err != nil {
		return nil, err
	}
	return &OnchainLogBytesIterator{contract: _Onchain.contract, event: "LogBytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a5.
//
// Solidity: event LogBytes(bytes arg0)
func (_Onchain *OnchainFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *OnchainLogBytes) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogBytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogBytes)
				if err := _Onchain.contract.UnpackLog(event, "LogBytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a5.
//
// Solidity: event LogBytes(bytes arg0)
func (_Onchain *OnchainFilterer) ParseLogBytes(log types.Log) (*OnchainLogBytes, error) {
	event := new(OnchainLogBytes)
	if err := _Onchain.contract.UnpackLog(event, "LogBytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogBytes16Iterator is returned from FilterLogBytes16 and is used to iterate over the raw logs and unpacked data for LogBytes16 events raised by the Onchain contract.
type OnchainLogBytes16Iterator struct {
	Event *OnchainLogBytes16 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogBytes16Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogBytes16)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogBytes16)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogBytes16Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogBytes16Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogBytes16 represents a LogBytes16 event raised by the Onchain contract.
type OnchainLogBytes16 struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes16 is a free log retrieval operation binding the contract event 0x9f7a2df33c1c92d195340c1708bc1c78ec4aed6cac45f305a0c9c9dcb5871207.
//
// Solidity: event LogBytes16(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterLogBytes16(opts *bind.FilterOpts) (*OnchainLogBytes16Iterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogBytes16")
	if err != nil {
		return nil, err
	}
	return &OnchainLogBytes16Iterator{contract: _Onchain.contract, event: "LogBytes16", logs: logs, sub: sub}, nil
}

// WatchLogBytes16 is a free log subscription operation binding the contract event 0x9f7a2df33c1c92d195340c1708bc1c78ec4aed6cac45f305a0c9c9dcb5871207.
//
// Solidity: event LogBytes16(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchLogBytes16(opts *bind.WatchOpts, sink chan<- *OnchainLogBytes16) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogBytes16")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogBytes16)
				if err := _Onchain.contract.UnpackLog(event, "LogBytes16", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes16 is a log parse operation binding the contract event 0x9f7a2df33c1c92d195340c1708bc1c78ec4aed6cac45f305a0c9c9dcb5871207.
//
// Solidity: event LogBytes16(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseLogBytes16(log types.Log) (*OnchainLogBytes16, error) {
	event := new(OnchainLogBytes16)
	if err := _Onchain.contract.UnpackLog(event, "LogBytes16", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Onchain contract.
type OnchainLogBytes32Iterator struct {
	Event *OnchainLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogBytes32 represents a LogBytes32 event raised by the Onchain contract.
type OnchainLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x009fd52f05c0ded31d6fb0ee580b923f85e99cf1a5a1da342f25e73c45829c83.
//
// Solidity: event LogBytes32(bytes32 arg0)
func (_Onchain *OnchainFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*OnchainLogBytes32Iterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &OnchainLogBytes32Iterator{contract: _Onchain.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x009fd52f05c0ded31d6fb0ee580b923f85e99cf1a5a1da342f25e73c45829c83.
//
// Solidity: event LogBytes32(bytes32 arg0)
func (_Onchain *OnchainFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *OnchainLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogBytes32)
				if err := _Onchain.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x009fd52f05c0ded31d6fb0ee580b923f85e99cf1a5a1da342f25e73c45829c83.
//
// Solidity: event LogBytes32(bytes32 arg0)
func (_Onchain *OnchainFilterer) ParseLogBytes32(log types.Log) (*OnchainLogBytes32, error) {
	event := new(OnchainLogBytes32)
	if err := _Onchain.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogRecoverErrorIterator is returned from FilterLogRecoverError and is used to iterate over the raw logs and unpacked data for LogRecoverError events raised by the Onchain contract.
type OnchainLogRecoverErrorIterator struct {
	Event *OnchainLogRecoverError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogRecoverErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogRecoverError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogRecoverError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogRecoverErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogRecoverErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogRecoverError represents a LogRecoverError event raised by the Onchain contract.
type OnchainLogRecoverError struct {
	Arg0 uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogRecoverError is a free log retrieval operation binding the contract event 0x9d91e3e6af4967817419b36cf53fb2a60335d23ebe396ea4f0da7ceb02a4f831.
//
// Solidity: event LogRecoverError(uint8 arg0)
func (_Onchain *OnchainFilterer) FilterLogRecoverError(opts *bind.FilterOpts) (*OnchainLogRecoverErrorIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogRecoverError")
	if err != nil {
		return nil, err
	}
	return &OnchainLogRecoverErrorIterator{contract: _Onchain.contract, event: "LogRecoverError", logs: logs, sub: sub}, nil
}

// WatchLogRecoverError is a free log subscription operation binding the contract event 0x9d91e3e6af4967817419b36cf53fb2a60335d23ebe396ea4f0da7ceb02a4f831.
//
// Solidity: event LogRecoverError(uint8 arg0)
func (_Onchain *OnchainFilterer) WatchLogRecoverError(opts *bind.WatchOpts, sink chan<- *OnchainLogRecoverError) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogRecoverError")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogRecoverError)
				if err := _Onchain.contract.UnpackLog(event, "LogRecoverError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogRecoverError is a log parse operation binding the contract event 0x9d91e3e6af4967817419b36cf53fb2a60335d23ebe396ea4f0da7ceb02a4f831.
//
// Solidity: event LogRecoverError(uint8 arg0)
func (_Onchain *OnchainFilterer) ParseLogRecoverError(log types.Log) (*OnchainLogRecoverError, error) {
	event := new(OnchainLogRecoverError)
	if err := _Onchain.contract.UnpackLog(event, "LogRecoverError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the Onchain contract.
type OnchainLogStringIterator struct {
	Event *OnchainLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogString represents a LogString event raised by the Onchain contract.
type OnchainLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string arg0)
func (_Onchain *OnchainFilterer) FilterLogString(opts *bind.FilterOpts) (*OnchainLogStringIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogString")
	if err != nil {
		return nil, err
	}
	return &OnchainLogStringIterator{contract: _Onchain.contract, event: "LogString", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string arg0)
func (_Onchain *OnchainFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *OnchainLogString) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogString)
				if err := _Onchain.contract.UnpackLog(event, "LogString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string arg0)
func (_Onchain *OnchainFilterer) ParseLogString(log types.Log) (*OnchainLogString, error) {
	event := new(OnchainLogString)
	if err := _Onchain.contract.UnpackLog(event, "LogString", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainPartialMatchIterator is returned from FilterPartialMatch and is used to iterate over the raw logs and unpacked data for PartialMatch events raised by the Onchain contract.
type OnchainPartialMatchIterator struct {
	Event *OnchainPartialMatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainPartialMatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainPartialMatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainPartialMatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainPartialMatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainPartialMatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainPartialMatch represents a PartialMatch event raised by the Onchain contract.
type OnchainPartialMatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPartialMatch is a free log retrieval operation binding the contract event 0xcb56a4fd10f2bad2015ad7e01fb83de3e6d71a6f46eef88ebe216fd70f25efd4.
//
// Solidity: event PartialMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterPartialMatch(opts *bind.FilterOpts) (*OnchainPartialMatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "PartialMatch")
	if err != nil {
		return nil, err
	}
	return &OnchainPartialMatchIterator{contract: _Onchain.contract, event: "PartialMatch", logs: logs, sub: sub}, nil
}

// WatchPartialMatch is a free log subscription operation binding the contract event 0xcb56a4fd10f2bad2015ad7e01fb83de3e6d71a6f46eef88ebe216fd70f25efd4.
//
// Solidity: event PartialMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchPartialMatch(opts *bind.WatchOpts, sink chan<- *OnchainPartialMatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "PartialMatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainPartialMatch)
				if err := _Onchain.contract.UnpackLog(event, "PartialMatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePartialMatch is a log parse operation binding the contract event 0xcb56a4fd10f2bad2015ad7e01fb83de3e6d71a6f46eef88ebe216fd70f25efd4.
//
// Solidity: event PartialMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParsePartialMatch(log types.Log) (*OnchainPartialMatch, error) {
	event := new(OnchainPartialMatch)
	if err := _Onchain.contract.UnpackLog(event, "PartialMatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainPunishMatcherIterator is returned from FilterPunishMatcher and is used to iterate over the raw logs and unpacked data for PunishMatcher events raised by the Onchain contract.
type OnchainPunishMatcherIterator struct {
	Event *OnchainPunishMatcher // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainPunishMatcherIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainPunishMatcher)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainPunishMatcher)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainPunishMatcherIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainPunishMatcherIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainPunishMatcher represents a PunishMatcher event raised by the Onchain contract.
type OnchainPunishMatcher struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPunishMatcher is a free log retrieval operation binding the contract event 0x5d03dcef971a6d5b97413cad12abae79f43e9422a6c38e8bc70592b18937ba23.
//
// Solidity: event PunishMatcher(address arg0)
func (_Onchain *OnchainFilterer) FilterPunishMatcher(opts *bind.FilterOpts) (*OnchainPunishMatcherIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "PunishMatcher")
	if err != nil {
		return nil, err
	}
	return &OnchainPunishMatcherIterator{contract: _Onchain.contract, event: "PunishMatcher", logs: logs, sub: sub}, nil
}

// WatchPunishMatcher is a free log subscription operation binding the contract event 0x5d03dcef971a6d5b97413cad12abae79f43e9422a6c38e8bc70592b18937ba23.
//
// Solidity: event PunishMatcher(address arg0)
func (_Onchain *OnchainFilterer) WatchPunishMatcher(opts *bind.WatchOpts, sink chan<- *OnchainPunishMatcher) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "PunishMatcher")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainPunishMatcher)
				if err := _Onchain.contract.UnpackLog(event, "PunishMatcher", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePunishMatcher is a log parse operation binding the contract event 0x5d03dcef971a6d5b97413cad12abae79f43e9422a6c38e8bc70592b18937ba23.
//
// Solidity: event PunishMatcher(address arg0)
func (_Onchain *OnchainFilterer) ParsePunishMatcher(log types.Log) (*OnchainPunishMatcher, error) {
	event := new(OnchainPunishMatcher)
	if err := _Onchain.contract.UnpackLog(event, "PunishMatcher", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainReceivedBatchDetailsIterator is returned from FilterReceivedBatchDetails and is used to iterate over the raw logs and unpacked data for ReceivedBatchDetails events raised by the Onchain contract.
type OnchainReceivedBatchDetailsIterator struct {
	Event *OnchainReceivedBatchDetails // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainReceivedBatchDetailsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainReceivedBatchDetails)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainReceivedBatchDetails)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainReceivedBatchDetailsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainReceivedBatchDetailsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainReceivedBatchDetails represents a ReceivedBatchDetails event raised by the Onchain contract.
type OnchainReceivedBatchDetails struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReceivedBatchDetails is a free log retrieval operation binding the contract event 0x9e82d75e1d25a2db33e754b50ce9378e4c2e505c68c05de244b398543c0e422e.
//
// Solidity: event ReceivedBatchDetails(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterReceivedBatchDetails(opts *bind.FilterOpts) (*OnchainReceivedBatchDetailsIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "ReceivedBatchDetails")
	if err != nil {
		return nil, err
	}
	return &OnchainReceivedBatchDetailsIterator{contract: _Onchain.contract, event: "ReceivedBatchDetails", logs: logs, sub: sub}, nil
}

// WatchReceivedBatchDetails is a free log subscription operation binding the contract event 0x9e82d75e1d25a2db33e754b50ce9378e4c2e505c68c05de244b398543c0e422e.
//
// Solidity: event ReceivedBatchDetails(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchReceivedBatchDetails(opts *bind.WatchOpts, sink chan<- *OnchainReceivedBatchDetails) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "ReceivedBatchDetails")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainReceivedBatchDetails)
				if err := _Onchain.contract.UnpackLog(event, "ReceivedBatchDetails", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceivedBatchDetails is a log parse operation binding the contract event 0x9e82d75e1d25a2db33e754b50ce9378e4c2e505c68c05de244b398543c0e422e.
//
// Solidity: event ReceivedBatchDetails(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseReceivedBatchDetails(log types.Log) (*OnchainReceivedBatchDetails, error) {
	event := new(OnchainReceivedBatchDetails)
	if err := _Onchain.contract.UnpackLog(event, "ReceivedBatchDetails", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainRemoveBatchOutOfDateIterator is returned from FilterRemoveBatchOutOfDate and is used to iterate over the raw logs and unpacked data for RemoveBatchOutOfDate events raised by the Onchain contract.
type OnchainRemoveBatchOutOfDateIterator struct {
	Event *OnchainRemoveBatchOutOfDate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainRemoveBatchOutOfDateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainRemoveBatchOutOfDate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainRemoveBatchOutOfDate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainRemoveBatchOutOfDateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainRemoveBatchOutOfDateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainRemoveBatchOutOfDate represents a RemoveBatchOutOfDate event raised by the Onchain contract.
type OnchainRemoveBatchOutOfDate struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemoveBatchOutOfDate is a free log retrieval operation binding the contract event 0xef2d1181ef6c5750f7ef1076cc112a454f5bf01f65b8e40daeb7390d2b660220.
//
// Solidity: event RemoveBatchOutOfDate(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterRemoveBatchOutOfDate(opts *bind.FilterOpts) (*OnchainRemoveBatchOutOfDateIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "RemoveBatchOutOfDate")
	if err != nil {
		return nil, err
	}
	return &OnchainRemoveBatchOutOfDateIterator{contract: _Onchain.contract, event: "RemoveBatchOutOfDate", logs: logs, sub: sub}, nil
}

// WatchRemoveBatchOutOfDate is a free log subscription operation binding the contract event 0xef2d1181ef6c5750f7ef1076cc112a454f5bf01f65b8e40daeb7390d2b660220.
//
// Solidity: event RemoveBatchOutOfDate(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchRemoveBatchOutOfDate(opts *bind.WatchOpts, sink chan<- *OnchainRemoveBatchOutOfDate) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "RemoveBatchOutOfDate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainRemoveBatchOutOfDate)
				if err := _Onchain.contract.UnpackLog(event, "RemoveBatchOutOfDate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveBatchOutOfDate is a log parse operation binding the contract event 0xef2d1181ef6c5750f7ef1076cc112a454f5bf01f65b8e40daeb7390d2b660220.
//
// Solidity: event RemoveBatchOutOfDate(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseRemoveBatchOutOfDate(log types.Log) (*OnchainRemoveBatchOutOfDate, error) {
	event := new(OnchainRemoveBatchOutOfDate)
	if err := _Onchain.contract.UnpackLog(event, "RemoveBatchOutOfDate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainRevertBatchIterator is returned from FilterRevertBatch and is used to iterate over the raw logs and unpacked data for RevertBatch events raised by the Onchain contract.
type OnchainRevertBatchIterator struct {
	Event *OnchainRevertBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainRevertBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainRevertBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainRevertBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainRevertBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainRevertBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainRevertBatch represents a RevertBatch event raised by the Onchain contract.
type OnchainRevertBatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRevertBatch is a free log retrieval operation binding the contract event 0xf335387fffae8d4c523007d8c373bffc677e94ca97652a6dabecea00f48e4dd6.
//
// Solidity: event RevertBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterRevertBatch(opts *bind.FilterOpts) (*OnchainRevertBatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "RevertBatch")
	if err != nil {
		return nil, err
	}
	return &OnchainRevertBatchIterator{contract: _Onchain.contract, event: "RevertBatch", logs: logs, sub: sub}, nil
}

// WatchRevertBatch is a free log subscription operation binding the contract event 0xf335387fffae8d4c523007d8c373bffc677e94ca97652a6dabecea00f48e4dd6.
//
// Solidity: event RevertBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchRevertBatch(opts *bind.WatchOpts, sink chan<- *OnchainRevertBatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "RevertBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainRevertBatch)
				if err := _Onchain.contract.UnpackLog(event, "RevertBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBatch is a log parse operation binding the contract event 0xf335387fffae8d4c523007d8c373bffc677e94ca97652a6dabecea00f48e4dd6.
//
// Solidity: event RevertBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseRevertBatch(log types.Log) (*OnchainRevertBatch, error) {
	event := new(OnchainRevertBatch)
	if err := _Onchain.contract.UnpackLog(event, "RevertBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
