// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package onchain

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// OnchainOrder is an auto generated low-level Go binding around an user-defined struct.
type OnchainOrder struct {
	Price             *big.Int
	Amount            *big.Int
	Side              bool
	From              [16]byte
	TradeHash         [32]byte
	OriginalOrderHash [32]byte
	Owner             common.Address
}

// OnchainMetaData contains all meta data concerning the Onchain contract.
var OnchainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"AcceptBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BatchMatchAmountAndProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BatchRawProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BatchTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"FullfilMatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"InvalidBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"InvalidOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LogAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"LogBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"LogBytes16\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"LogBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumECDSA.RecoverError\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"LogRecoverError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"LogString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogUint256\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MatchedPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PunishMatcher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ReceivedBatchDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"RemoveBatchOutOfDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"RevertBatch\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWaitingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m\",\"type\":\"address\"}],\"name\":\"isMatcher\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"bidBatchID\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"askBatchID\",\"type\":\"bytes16\"}],\"name\":\"matching\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_m\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"}],\"name\":\"reportMissingDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"name\":\"sendBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"batchID\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"side\",\"type\":\"bool\"},{\"internalType\":\"bytes16\",\"name\":\"from\",\"type\":\"bytes16\"},{\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"originalOrderHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"structOnchain.Order[]\",\"name\":\"_ords\",\"type\":\"tuple[]\"}],\"name\":\"submitOrderDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b506040516200445e3803806200445e833981810160405281019062000036919062000138565b8060075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400005f81905550600a6001819055503360085f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000168565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200010282620000d7565b9050919050565b6200011481620000f6565b81146200011f575f80fd5b50565b5f81519050620001328162000109565b92915050565b5f6020828403121562000150576200014f620000d3565b5b5f6200015f8482850162000122565b91505092915050565b6142e880620001765f395ff3fe6080604052600436106100a6575f3560e01c806336ee67491161006357806336ee6749146101925780634420e486146101ce5780634dcbd09b146101ea5780635e57966d1461021457806378b32cf514610250578063e939567914610278576100a6565b80630c145e73146100aa5780630ffde4c5146100d257806319f5e9fe146100fa5780632a096397146101365780633005d34c1461014057806332a58e7914610168575b5f80fd5b3480156100b5575f80fd5b506100d060048036038101906100cb9190612fe3565b6102b4565b005b3480156100dd575f80fd5b506100f860048036038101906100f3919061331b565b610c08565b005b348015610105575f80fd5b50610120600480360381019061011b9190613375565b611e92565b60405161012d91906133af565b60405180910390f35b61013e611f2a565b005b34801561014b575f80fd5b5061016660048036038101906101619190613478565b611f6e565b005b348015610173575f80fd5b5061017c612057565b604051610189919061352c565b60405180910390f35b34801561019d575f80fd5b506101b860048036038101906101b39190613545565b61205f565b6040516101c591906133af565b60405180910390f35b6101e860048036038101906101e39190613545565b6120a8565b005b3480156101f5575f80fd5b506101fe612132565b60405161020b919061352c565b60405180910390f35b34801561021f575f80fd5b5061023a60048036038101906102359190613545565b61213b565b60405161024791906135ea565b60405180910390f35b34801561025b575f80fd5b5061027660048036038101906102719190613375565b612165565b005b348015610283575f80fd5b5061029e6004803603810190610299919061360a565b6124b8565b6040516102ab91906135ea565b60405180910390f35b815f73ffffffffffffffffffffffffffffffffffffffff1660035f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361037d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103749061367f565b60405180910390fd5b815f73ffffffffffffffffffffffffffffffffffffffff1660035f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043d9061367f565b60405180910390fd5b5f60035f866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206040518060e00160405290815f82015f9054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015f9054906101000a900460ff161515151581526020016003820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054610558906136ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610584906136ca565b80156105cf5780601f106105a6576101008083540402835291602001916105cf565b820191905f5260205f20905b8154815290600101906020018083116105b257829003601f168201915b5050505050815260200160058201548152505090505f60035f866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206040518060e00160405290815f82015f9054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015f9054906101000a900460ff161515151581526020016003820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820180546106f6906136ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610722906136ca565b801561076d5780601f106107445761010080835404028352916020019161076d565b820191905f5260205f20905b81548152906001019060200180831161075057829003601f168201915b505050505081526020016005820154815250509050856fffffffffffffffffffffffffffffffff1916825f01516fffffffffffffffffffffffffffffffff1916146107ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e490613744565b60405180910390fd5b5f8260c0015114610833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082a906137ac565b60405180910390fd5b846fffffffffffffffffffffffffffffffff1916815f01516fffffffffffffffffffffffffffffffff19161461089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089590613814565b60405180910390fd5b5f8160c00151146108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db9061387c565b60405180910390fd5b8060200151826020015110158015610903575080604001518260400151145b15610c00575f60028260200151846020015161091f91906138c7565b6109299190613927565b90507f99869490c192d9713fc1773145a18b2ef86613027655b38e98d987459bca508c83604001518285602001516109619190613957565b60405161096f92919061398a565b60405180910390a17fe815d3dc17143b69b6fb9905c4f0a0da9afaecfbda798ab64633b254ce53017a835f01518285602001516109ac9190613957565b6040516109ba9291906139c0565b60405180910390a17fe815d3dc17143b69b6fb9905c4f0a0da9afaecfbda798ab64633b254ce53017a825f01518285602001516109f79190613957565b604051610a059291906139c0565b60405180910390a17f21331f5f70f88dca9a2b9b06c6cf44878ab0c9e6a395bca9385b8de7163fb3e781604051610a3c919061352c565b60405180910390a14260035f896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20600501819055504260035f886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060050181905550815f015160045f855f01516fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f6101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550825f015160045f845f01516fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f6101000a8154816fffffffffffffffffffffffffffffffff021916908360801c02179055507f57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965835f0151604051610bbc91906139e7565b60405180910390a17f57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965825f0151604051610bf691906139e7565b60405180910390a1505b505050505050565b815f60035f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206005015403610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c90613a4a565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff1660035f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590613ab2565b60405180910390fd5b7f6f79b986cb819220a660d201db3b4b62109e66c0e2e406a8ca4685376879f6688442604051610d7f9291906139c0565b60405180910390a15f60605f5b85518160ff161015610ef357858160ff1681518110610dae57610dad613ad0565b5b60200260200101516020015183610dc591906138c7565b925081868260ff1681518110610dde57610ddd613ad0565b5b60200260200101515f0151878360ff1681518110610dff57610dfe613ad0565b5b602002602001015160200151888460ff1681518110610e2157610e20613ad0565b5b602002602001015160400151898560ff1681518110610e4357610e42613ad0565b5b602002602001015160600151604051602001610e629493929190613b82565b60405160208183030381529060405280519060200120878360ff1681518110610e8e57610e8d613ad0565b5b602002602001015160800151888460ff1681518110610eb057610eaf613ad0565b5b602002602001015160a00151604051602001610ecf9493929190613c33565b60405160208183030381529060405291508080610eeb90613c88565b915050610d8c565b5060035f876fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20600201548214610f73577fe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad74886604051610f6491906139e7565b60405180910390a15050611e8c565b5f6111858760035f8a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206001015460035f8b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206002015460035f8c6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206003015f9054906101000a900460ff168a518760035f8f6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016110a99796959493929190613d0c565b6040516020818303038152906040528051906020012060035f8a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206004018054611104906136ca565b80601f0160208091040260200160405190810160405280929190818152602001828054611130906136ca565b801561117b5780601f106111525761010080835404028352916020019161117b565b820191905f5260205f20905b81548152906001019060200180831161115e57829003601f168201915b50505050506124ca565b905060035f886fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611253577fe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad7488760405161124391906139e7565b60405180910390a1505050611e8c565b5f60065f60045f8b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f9054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2080549050036114b0575f5b86518160ff1610156114aa575f604051806080016040528060035f8c6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20600101548152602001898460ff168151811061134757611346613ad0565b5b6020026020010151602001518152602001898460ff168151811061136e5761136d613ad0565b5b60200260200101516040015115158152602001898460ff168151811061139757611396613ad0565b5b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff16815250905060065f8a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f0155602082015181600101556040820151816002015f6101000a81548160ff02191690831515021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505080806114a290613c88565b9150506112d9565b50611e0f565b5f60065f60045f8b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f9054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156115fd578382905f5260205f2090600302016040518060800160405290815f820154815260200160018201548152602001600282015f9054906101000a900460ff161515151581526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508152602001906001019061154a565b5050505090505f8151118015611635575060011515815f8151811061162557611624613ad0565b5b6020026020010151604001511515145b15611823575f5b81518160ff16101561181d57818160ff168151811061165e5761165d613ad0565b5b602002602001015160200151828260ff16815181106116805761167f613ad0565b5b60200260200101515f01516116959190613d88565b60055f848460ff16815181106116ae576116ad613ad0565b5b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546117019190613957565b9250508190555060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848460ff168151811061177d5761177c613ad0565b5b602002602001015160600151858560ff168151811061179f5761179e613ad0565b5b6020026020010151602001516040518463ffffffff1660e01b81526004016117c993929190613dd8565b6020604051808303815f875af11580156117e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118099190613e21565b50808061181590613c88565b91505061163c565b50611a08565b5f5b81518160ff161015611a065760075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd838360ff168151811061188457611883613ad0565b5b60200260200101516060015160085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858560ff16815181106118c8576118c7613ad0565b5b6020026020010151602001516040518463ffffffff1660e01b81526004016118f293929190613dd8565b6020604051808303815f875af115801561190e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119329190613e21565b50818160ff168151811061194957611948613ad0565b5b602002602001015160200151828260ff168151811061196b5761196a613ad0565b5b60200260200101515f01516119809190613d88565b60055f848460ff168151811061199957611998613ad0565b5b60200260200101516060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546119ec91906138c7565b9250508190555080806119fe90613c88565b915050611825565b505b5f8751118015611a3a575060011515875f81518110611a2a57611a29613ad0565b5b6020026020010151604001511515145b15611c28575f5b87518160ff161015611c2257878160ff1681518110611a6357611a62613ad0565b5b602002602001015160200151888260ff1681518110611a8557611a84613ad0565b5b60200260200101515f0151611a9a9190613d88565b60055f8a8460ff1681518110611ab357611ab2613ad0565b5b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611b069190613957565b9250508190555060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a8460ff1681518110611b8257611b81613ad0565b5b602002602001015160c001518b8560ff1681518110611ba457611ba3613ad0565b5b6020026020010151602001516040518463ffffffff1660e01b8152600401611bce93929190613dd8565b6020604051808303815f875af1158015611bea573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c0e9190613e21565b508080611c1a90613c88565b915050611a41565b50611e0d565b5f5b87518160ff161015611e0b5760075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd898360ff1681518110611c8957611c88613ad0565b5b602002602001015160c0015160085f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b8560ff1681518110611ccd57611ccc613ad0565b5b6020026020010151602001516040518463ffffffff1660e01b8152600401611cf793929190613dd8565b6020604051808303815f875af1158015611d13573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d379190613e21565b50878160ff1681518110611d4e57611d4d613ad0565b5b602002602001015160200151888260ff1681518110611d7057611d6f613ad0565b5b60200260200101515f0151611d859190613d88565b60055f8a8460ff1681518110611d9e57611d9d613ad0565b5b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611df191906138c7565b925050819055508080611e0390613c88565b915050611c2a565b505b505b5f60035f896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20600501819055507fd55425a5fdfbfd51b556071465ab893c0ed4d05807e813f5f490cac8a93b316b878751604051611e809291906139c0565b60405180910390a15050505b50505050565b5f8060035f846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206005015414158015611f2357504260015460035f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060050154611f2191906138c7565b105b9050919050565b3460055f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550565b7f6f79b986cb819220a660d201db3b4b62109e66c0e2e406a8ca4685376879f6688642604051611f9f9291906139c0565b60405180910390a17f4e69af47be64b65d6f6b732189c85581fa38a2b52d8065e302b00075701f6cfd86868686604051611fdc9493929190613e4c565b60405180910390a15f6040518060e00160405280886fffffffffffffffffffffffffffffffff1916815260200187815260200186815260200185151581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020015f815250905061204e816124f4565b50505050505050565b5f8054905090565b5f8060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205414159050919050565b5f543410156120ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e390613ed9565b60405180910390fd5b5f5460025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555050565b5f600154905090565b606061215e8273ffffffffffffffffffffffffffffffffffffffff1660146125fc565b9050919050565b805f60035f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060050154036121e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d990613a4a565b60405180910390fd5b4260015460035f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206005015461222b91906138c7565b1061226b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226290613f41565b60405180910390fd5b5f60025f60035f866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f60035f846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20600501819055505f60045f846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f9054906101000a900460801b905060045f846fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f6101000a8154906fffffffffffffffffffffffffffffffff02191690556123eb8161283a565b7fef2d1181ef6c5750f7ef1076cc112a454f5bf01f65b8e40daeb7390d2b6602208360405161241a91906139e7565b60405180910390a17f5d03dcef971a6d5b97413cad12abae79f43e9422a6c38e8bc70592b18937ba2360035f856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f2060030160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516124ab9190613f5f565b60405180910390a1505050565b60606124c382612ac4565b9050919050565b5f805f806124d88686612b8e565b9250925092506124e88282612be3565b82935050505092915050565b8060035f835f01516fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f820151815f015f6101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160010155604082015181600201556060820151816003015f6101000a81548160ff02191690831515021790555060808201518160030160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040190816125eb9190614115565b5060c0820151816005015590505050565b60605f8390505f60028460026126129190613d88565b61261c91906138c7565b67ffffffffffffffff81111561263557612634613035565b5b6040519080825280601f01601f1916602001820160405280156126675781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f8151811061269e5761269d613ad0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061270157612700613ad0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505f600185600261273f9190613d88565b61274991906138c7565b90505b60018111156127e8577f3031323334353637383961626364656600000000000000000000000000000000600f84166010811061278b5761278a613ad0565b5b1a60f81b8282815181106127a2576127a1613ad0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600483901c9250806127e1906141e4565b905061274c565b505f821461282f5784846040517fe22e27eb00000000000000000000000000000000000000000000000000000000815260040161282692919061398a565b60405180910390fd5b809250505092915050565b5f60035f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f20600501541480156128dc57505f60801b60045f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f205f9054906101000a900460801b6fffffffffffffffffffffffffffffffff191614155b15612ac1577ff335387fffae8d4c523007d8c373bffc677e94ca97652a6dabecea00f48e4dd68160405161291091906139e7565b60405180910390a15f60035f836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020015f206040518060e00160405290815f82015f9054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015f9054906101000a900460ff161515151581526020016003820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054612a2a906136ca565b80601f0160208091040260200160405190810160405280929190818152602001828054612a56906136ca565b8015612aa15780601f10612a7857610100808354040283529160200191612aa1565b820191905f5260205f20905b815481529060010190602001808311612a8457829003601f168201915b505050505081526020016005820154815250509050612abf816124f4565b505b50565b60605f6001612ad284612d45565b0190505f8167ffffffffffffffff811115612af057612aef613035565b5b6040519080825280601f01601f191660200182016040528015612b225781602001600182028036833780820191505090505b5090505f82602001820190505b600115612b83578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612b7857612b776138fa565b5b0494505f8503612b2f575b819350505050919050565b5f805f6041845103612bce575f805f602087015192506040870151915060608701515f1a9050612bc088828585612e96565b955095509550505050612bdc565b5f600285515f1b9250925092505b9250925092565b5f6003811115612bf657612bf561420b565b5b826003811115612c0957612c0861420b565b5b0315612d415760016003811115612c2357612c2261420b565b5b826003811115612c3657612c3561420b565b5b03612c6d576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115612c8157612c8061420b565b5b826003811115612c9457612c9361420b565b5b03612cd857805f1c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401612ccf919061352c565b60405180910390fd5b600380811115612ceb57612cea61420b565b5b826003811115612cfe57612cfd61420b565b5b03612d4057806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401612d379190614247565b60405180910390fd5b5b5050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612da1577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612d9757612d966138fa565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612dde576d04ee2d6d415b85acef81000000008381612dd457612dd36138fa565b5b0492506020810190505b662386f26fc100008310612e0d57662386f26fc100008381612e0357612e026138fa565b5b0492506010810190505b6305f5e1008310612e36576305f5e1008381612e2c57612e2b6138fa565b5b0492506008810190505b6127108310612e5b576127108381612e5157612e506138fa565b5b0492506004810190505b60648310612e7e5760648381612e7457612e736138fa565b5b0492506002810190505b600a8310612e8d576001810190505b80915050919050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c1115612ed2575f600385925092509250612f73565b5f6001888888886040515f8152602001604052604051612ef5949392919061426f565b6020604051602081039080840390855afa158015612f15573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612f66575f60015f801b93509350935050612f73565b805f805f1b935093509350505b9450945094915050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b612fc281612f8e565b8114612fcc575f80fd5b50565b5f81359050612fdd81612fb9565b92915050565b5f8060408385031215612ff957612ff8612f86565b5b5f61300685828601612fcf565b925050602061301785828601612fcf565b9150509250929050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61306b82613025565b810181811067ffffffffffffffff8211171561308a57613089613035565b5b80604052505050565b5f61309c612f7d565b90506130a88282613062565b919050565b5f67ffffffffffffffff8211156130c7576130c6613035565b5b602082029050602081019050919050565b5f80fd5b5f80fd5b5f819050919050565b6130f2816130e0565b81146130fc575f80fd5b50565b5f8135905061310d816130e9565b92915050565b5f8115159050919050565b61312781613113565b8114613131575f80fd5b50565b5f813590506131428161311e565b92915050565b5f819050919050565b61315a81613148565b8114613164575f80fd5b50565b5f8135905061317581613151565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6131a48261317b565b9050919050565b6131b48161319a565b81146131be575f80fd5b50565b5f813590506131cf816131ab565b92915050565b5f60e082840312156131ea576131e96130dc565b5b6131f460e0613093565b90505f613203848285016130ff565b5f830152506020613216848285016130ff565b602083015250604061322a84828501613134565b604083015250606061323e84828501612fcf565b606083015250608061325284828501613167565b60808301525060a061326684828501613167565b60a08301525060c061327a848285016131c1565b60c08301525092915050565b5f613298613293846130ad565b613093565b90508083825260208201905060e084028301858111156132bb576132ba6130d8565b5b835b818110156132e457806132d088826131d5565b84526020840193505060e0810190506132bd565b5050509392505050565b5f82601f83011261330257613301613021565b5b8135613312848260208601613286565b91505092915050565b5f806040838503121561333157613330612f86565b5b5f61333e85828601612fcf565b925050602083013567ffffffffffffffff81111561335f5761335e612f8a565b5b61336b858286016132ee565b9150509250929050565b5f6020828403121561338a57613389612f86565b5b5f61339784828501612fcf565b91505092915050565b6133a981613113565b82525050565b5f6020820190506133c25f8301846133a0565b92915050565b5f80fd5b5f67ffffffffffffffff8211156133e6576133e5613035565b5b6133ef82613025565b9050602081019050919050565b828183375f83830152505050565b5f61341c613417846133cc565b613093565b905082815260208101848484011115613438576134376133c8565b5b6134438482856133fc565b509392505050565b5f82601f83011261345f5761345e613021565b5b813561346f84826020860161340a565b91505092915050565b5f805f805f8060c0878903121561349257613491612f86565b5b5f61349f89828a01612fcf565b96505060206134b089828a016130ff565b95505060406134c189828a016130ff565b94505060606134d289828a01613134565b93505060806134e389828a016131c1565b92505060a087013567ffffffffffffffff81111561350457613503612f8a565b5b61351089828a0161344b565b9150509295509295509295565b613526816130e0565b82525050565b5f60208201905061353f5f83018461351d565b92915050565b5f6020828403121561355a57613559612f86565b5b5f613567848285016131c1565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156135a757808201518184015260208101905061358c565b5f8484015250505050565b5f6135bc82613570565b6135c6818561357a565b93506135d681856020860161358a565b6135df81613025565b840191505092915050565b5f6020820190508181035f83015261360281846135b2565b905092915050565b5f6020828403121561361f5761361e612f86565b5b5f61362c848285016130ff565b91505092915050565b7f74686520626174636820646f6573206e6f7420657869737400000000000000005f82015250565b5f61366960188361357a565b915061367482613635565b602082019050919050565b5f6020820190508181035f8301526136968161365d565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806136e157607f821691505b6020821081036136f4576136f361369d565b5b50919050565b7f62696420626174636820646f65736e27742065787369740000000000000000005f82015250565b5f61372e60178361357a565b9150613739826136fa565b602082019050919050565b5f6020820190508181035f83015261375b81613722565b9050919050565b7f6269642062617463682069732070656e64696e670000000000000000000000005f82015250565b5f61379660148361357a565b91506137a182613762565b602082019050919050565b5f6020820190508181035f8301526137c38161378a565b9050919050565b7f61736b206261746368206f6465736e27742065787369740000000000000000005f82015250565b5f6137fe60178361357a565b9150613809826137ca565b602082019050919050565b5f6020820190508181035f83015261382b816137f2565b9050919050565b7f61736b2062617463682069732070656e64696e670000000000000000000000005f82015250565b5f61386660148361357a565b915061387182613832565b602082019050919050565b5f6020820190508181035f8301526138938161385a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6138d1826130e0565b91506138dc836130e0565b92508282019050808211156138f4576138f361389a565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613931826130e0565b915061393c836130e0565b92508261394c5761394b6138fa565b5b828204905092915050565b5f613961826130e0565b915061396c836130e0565b92508282039050818111156139845761398361389a565b5b92915050565b5f60408201905061399d5f83018561351d565b6139aa602083018461351d565b9392505050565b6139ba81612f8e565b82525050565b5f6040820190506139d35f8301856139b1565b6139e0602083018461351d565b9392505050565b5f6020820190506139fa5f8301846139b1565b92915050565b7f746865206261746368206973206e6f742070656e64696e6700000000000000005f82015250565b5f613a3460188361357a565b9150613a3f82613a00565b602082019050919050565b5f6020820190508181035f830152613a6181613a28565b9050919050565b7f726571756972652062617463682773206f0000000000000000000000000000005f82015250565b5f613a9c60118361357a565b9150613aa782613a68565b602082019050919050565b5f6020820190508181035f830152613ac981613a90565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050919050565b613b17613b12826130e0565b613afd565b82525050565b5f8160f81b9050919050565b5f613b3382613b1d565b9050919050565b5f613b4482613b29565b9050919050565b613b5c613b5782613113565b613b3a565b82525050565b5f819050919050565b613b7c613b7782612f8e565b613b62565b82525050565b5f613b8d8287613b06565b602082019150613b9d8286613b06565b602082019150613bad8285613b4b565b600182019150613bbd8284613b6b565b60108201915081905095945050505050565b5f81519050919050565b5f81905092915050565b5f613bed82613bcf565b613bf78185613bd9565b9350613c0781856020860161358a565b80840191505092915050565b5f819050919050565b613c2d613c2882613148565b613c13565b82525050565b5f613c3e8287613be3565b9150613c4a8286613c1c565b602082019150613c5a8285613c1c565b602082019150613c6a8284613c1c565b60208201915081905095945050505050565b5f60ff82169050919050565b5f613c9282613c7c565b915060ff8203613ca557613ca461389a565b5b600182019050919050565b613cc1613cbc82613c7c565b613b29565b82525050565b5f8160601b9050919050565b5f613cdd82613cc7565b9050919050565b5f613cee82613cd3565b9050919050565b613d06613d018261319a565b613ce4565b82525050565b5f613d17828a613b6b565b601082019150613d278289613b06565b602082019150613d378288613b06565b602082019150613d478287613b4b565b600182019150613d578286613cb0565b600182019150613d678285613be3565b9150613d738284613cf5565b60148201915081905098975050505050505050565b5f613d92826130e0565b9150613d9d836130e0565b9250828202613dab816130e0565b91508282048414831517613dc257613dc161389a565b5b5092915050565b613dd28161319a565b82525050565b5f606082019050613deb5f830186613dc9565b613df86020830185613dc9565b613e05604083018461351d565b949350505050565b5f81519050613e1b8161311e565b92915050565b5f60208284031215613e3657613e35612f86565b5b5f613e4384828501613e0d565b91505092915050565b5f608082019050613e5f5f8301876139b1565b613e6c602083018661351d565b613e79604083018561351d565b613e8660608301846133a0565b95945050505050565b7f726567697374657220666565206973206e6f7420656e6f7567680000000000005f82015250565b5f613ec3601a8361357a565b9150613ece82613e8f565b602082019050919050565b5f6020820190508181035f830152613ef081613eb7565b9050919050565b7f746865206261746368206973206e6f74206f75742d6f662d64617465000000005f82015250565b5f613f2b601c8361357a565b9150613f3682613ef7565b602082019050919050565b5f6020820190508181035f830152613f5881613f1f565b9050919050565b5f602082019050613f725f830184613dc9565b92915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302613fd47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f99565b613fde8683613f99565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61401961401461400f846130e0565b613ff6565b6130e0565b9050919050565b5f819050919050565b61403283613fff565b61404661403e82614020565b848454613fa5565b825550505050565b5f90565b61405a61404e565b614065818484614029565b505050565b5b818110156140885761407d5f82614052565b60018101905061406b565b5050565b601f8211156140cd5761409e81613f78565b6140a784613f8a565b810160208510156140b6578190505b6140ca6140c285613f8a565b83018261406a565b50505b505050565b5f82821c905092915050565b5f6140ed5f19846008026140d2565b1980831691505092915050565b5f61410583836140de565b9150826002028217905092915050565b61411e82613bcf565b67ffffffffffffffff81111561413757614136613035565b5b61414182546136ca565b61414c82828561408c565b5f60209050601f83116001811461417d575f841561416b578287015190505b61417585826140fa565b8655506141dc565b601f19841661418b86613f78565b5f5b828110156141b25784890151825560018201915060208501945060208101905061418d565b868310156141cf57848901516141cb601f8916826140de565b8355505b6001600288020188555050505b505050505050565b5f6141ee826130e0565b91505f8203614200576141ff61389a565b5b600182039050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b61424181613148565b82525050565b5f60208201905061425a5f830184614238565b92915050565b61426981613c7c565b82525050565b5f6080820190506142825f830187614238565b61428f6020830186614260565b61429c6040830185614238565b6142a96060830184614238565b9594505050505056fea26469706673582212205ae690b1ff6ac226e20e8a76e8c5d8b04542e571f5b23124508c0e668a80c2bb64736f6c63430008180033",
}

// OnchainABI is the input ABI used to generate the binding from.
// Deprecated: Use OnchainMetaData.ABI instead.
var OnchainABI = OnchainMetaData.ABI

// OnchainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OnchainMetaData.Bin instead.
var OnchainBin = OnchainMetaData.Bin

// DeployOnchain deploys a new Ethereum contract, binding an instance of Onchain to it.
func DeployOnchain(auth *bind.TransactOpts, backend bind.ContractBackend, _token common.Address) (common.Address, *types.Transaction, *Onchain, error) {
	parsed, err := OnchainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OnchainBin), backend, _token)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Onchain{OnchainCaller: OnchainCaller{contract: contract}, OnchainTransactor: OnchainTransactor{contract: contract}, OnchainFilterer: OnchainFilterer{contract: contract}}, nil
}

// Onchain is an auto generated Go binding around an Ethereum contract.
type Onchain struct {
	OnchainCaller     // Read-only binding to the contract
	OnchainTransactor // Write-only binding to the contract
	OnchainFilterer   // Log filterer for contract events
}

// OnchainCaller is an auto generated read-only Go binding around an Ethereum contract.
type OnchainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OnchainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OnchainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OnchainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OnchainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OnchainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OnchainSession struct {
	Contract     *Onchain          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OnchainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OnchainCallerSession struct {
	Contract *OnchainCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OnchainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OnchainTransactorSession struct {
	Contract     *OnchainTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OnchainRaw is an auto generated low-level Go binding around an Ethereum contract.
type OnchainRaw struct {
	Contract *Onchain // Generic contract binding to access the raw methods on
}

// OnchainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OnchainCallerRaw struct {
	Contract *OnchainCaller // Generic read-only contract binding to access the raw methods on
}

// OnchainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OnchainTransactorRaw struct {
	Contract *OnchainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOnchain creates a new instance of Onchain, bound to a specific deployed contract.
func NewOnchain(address common.Address, backend bind.ContractBackend) (*Onchain, error) {
	contract, err := bindOnchain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Onchain{OnchainCaller: OnchainCaller{contract: contract}, OnchainTransactor: OnchainTransactor{contract: contract}, OnchainFilterer: OnchainFilterer{contract: contract}}, nil
}

// NewOnchainCaller creates a new read-only instance of Onchain, bound to a specific deployed contract.
func NewOnchainCaller(address common.Address, caller bind.ContractCaller) (*OnchainCaller, error) {
	contract, err := bindOnchain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OnchainCaller{contract: contract}, nil
}

// NewOnchainTransactor creates a new write-only instance of Onchain, bound to a specific deployed contract.
func NewOnchainTransactor(address common.Address, transactor bind.ContractTransactor) (*OnchainTransactor, error) {
	contract, err := bindOnchain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OnchainTransactor{contract: contract}, nil
}

// NewOnchainFilterer creates a new log filterer instance of Onchain, bound to a specific deployed contract.
func NewOnchainFilterer(address common.Address, filterer bind.ContractFilterer) (*OnchainFilterer, error) {
	contract, err := bindOnchain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OnchainFilterer{contract: contract}, nil
}

// bindOnchain binds a generic wrapper to an already deployed contract.
func bindOnchain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OnchainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Onchain *OnchainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Onchain.Contract.OnchainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Onchain *OnchainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Onchain.Contract.OnchainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Onchain *OnchainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Onchain.Contract.OnchainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Onchain *OnchainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Onchain.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Onchain *OnchainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Onchain.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Onchain *OnchainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Onchain.Contract.contract.Transact(opts, method, params...)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address _addr) pure returns(string)
func (_Onchain *OnchainCaller) AddressToString(opts *bind.CallOpts, _addr common.Address) (string, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "addressToString", _addr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address _addr) pure returns(string)
func (_Onchain *OnchainSession) AddressToString(_addr common.Address) (string, error) {
	return _Onchain.Contract.AddressToString(&_Onchain.CallOpts, _addr)
}

// AddressToString is a free data retrieval call binding the contract method 0x5e57966d.
//
// Solidity: function addressToString(address _addr) pure returns(string)
func (_Onchain *OnchainCallerSession) AddressToString(_addr common.Address) (string, error) {
	return _Onchain.Contract.AddressToString(&_Onchain.CallOpts, _addr)
}

// GetRegisterFee is a free data retrieval call binding the contract method 0x32a58e79.
//
// Solidity: function getRegisterFee() view returns(uint256)
func (_Onchain *OnchainCaller) GetRegisterFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "getRegisterFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRegisterFee is a free data retrieval call binding the contract method 0x32a58e79.
//
// Solidity: function getRegisterFee() view returns(uint256)
func (_Onchain *OnchainSession) GetRegisterFee() (*big.Int, error) {
	return _Onchain.Contract.GetRegisterFee(&_Onchain.CallOpts)
}

// GetRegisterFee is a free data retrieval call binding the contract method 0x32a58e79.
//
// Solidity: function getRegisterFee() view returns(uint256)
func (_Onchain *OnchainCallerSession) GetRegisterFee() (*big.Int, error) {
	return _Onchain.Contract.GetRegisterFee(&_Onchain.CallOpts)
}

// GetWaitingTime is a free data retrieval call binding the contract method 0x4dcbd09b.
//
// Solidity: function getWaitingTime() view returns(uint256)
func (_Onchain *OnchainCaller) GetWaitingTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "getWaitingTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWaitingTime is a free data retrieval call binding the contract method 0x4dcbd09b.
//
// Solidity: function getWaitingTime() view returns(uint256)
func (_Onchain *OnchainSession) GetWaitingTime() (*big.Int, error) {
	return _Onchain.Contract.GetWaitingTime(&_Onchain.CallOpts)
}

// GetWaitingTime is a free data retrieval call binding the contract method 0x4dcbd09b.
//
// Solidity: function getWaitingTime() view returns(uint256)
func (_Onchain *OnchainCallerSession) GetWaitingTime() (*big.Int, error) {
	return _Onchain.Contract.GetWaitingTime(&_Onchain.CallOpts)
}

// IsMatcher is a free data retrieval call binding the contract method 0x36ee6749.
//
// Solidity: function isMatcher(address _m) view returns(bool)
func (_Onchain *OnchainCaller) IsMatcher(opts *bind.CallOpts, _m common.Address) (bool, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "isMatcher", _m)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMatcher is a free data retrieval call binding the contract method 0x36ee6749.
//
// Solidity: function isMatcher(address _m) view returns(bool)
func (_Onchain *OnchainSession) IsMatcher(_m common.Address) (bool, error) {
	return _Onchain.Contract.IsMatcher(&_Onchain.CallOpts, _m)
}

// IsMatcher is a free data retrieval call binding the contract method 0x36ee6749.
//
// Solidity: function isMatcher(address _m) view returns(bool)
func (_Onchain *OnchainCallerSession) IsMatcher(_m common.Address) (bool, error) {
	return _Onchain.Contract.IsMatcher(&_Onchain.CallOpts, _m)
}

// IsPending is a free data retrieval call binding the contract method 0x19f5e9fe.
//
// Solidity: function isPending(bytes16 batchID) view returns(bool)
func (_Onchain *OnchainCaller) IsPending(opts *bind.CallOpts, batchID [16]byte) (bool, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "isPending", batchID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPending is a free data retrieval call binding the contract method 0x19f5e9fe.
//
// Solidity: function isPending(bytes16 batchID) view returns(bool)
func (_Onchain *OnchainSession) IsPending(batchID [16]byte) (bool, error) {
	return _Onchain.Contract.IsPending(&_Onchain.CallOpts, batchID)
}

// IsPending is a free data retrieval call binding the contract method 0x19f5e9fe.
//
// Solidity: function isPending(bytes16 batchID) view returns(bool)
func (_Onchain *OnchainCallerSession) IsPending(batchID [16]byte) (bool, error) {
	return _Onchain.Contract.IsPending(&_Onchain.CallOpts, batchID)
}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 num) pure returns(string)
func (_Onchain *OnchainCaller) UintToString(opts *bind.CallOpts, num *big.Int) (string, error) {
	var out []interface{}
	err := _Onchain.contract.Call(opts, &out, "uintToString", num)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 num) pure returns(string)
func (_Onchain *OnchainSession) UintToString(num *big.Int) (string, error) {
	return _Onchain.Contract.UintToString(&_Onchain.CallOpts, num)
}

// UintToString is a free data retrieval call binding the contract method 0xe9395679.
//
// Solidity: function uintToString(uint256 num) pure returns(string)
func (_Onchain *OnchainCallerSession) UintToString(num *big.Int) (string, error) {
	return _Onchain.Contract.UintToString(&_Onchain.CallOpts, num)
}

// Matching is a paid mutator transaction binding the contract method 0x0c145e73.
//
// Solidity: function matching(bytes16 bidBatchID, bytes16 askBatchID) returns()
func (_Onchain *OnchainTransactor) Matching(opts *bind.TransactOpts, bidBatchID [16]byte, askBatchID [16]byte) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "matching", bidBatchID, askBatchID)
}

// Matching is a paid mutator transaction binding the contract method 0x0c145e73.
//
// Solidity: function matching(bytes16 bidBatchID, bytes16 askBatchID) returns()
func (_Onchain *OnchainSession) Matching(bidBatchID [16]byte, askBatchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.Matching(&_Onchain.TransactOpts, bidBatchID, askBatchID)
}

// Matching is a paid mutator transaction binding the contract method 0x0c145e73.
//
// Solidity: function matching(bytes16 bidBatchID, bytes16 askBatchID) returns()
func (_Onchain *OnchainTransactorSession) Matching(bidBatchID [16]byte, askBatchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.Matching(&_Onchain.TransactOpts, bidBatchID, askBatchID)
}

// MyDeposit is a paid mutator transaction binding the contract method 0x2a096397.
//
// Solidity: function myDeposit() payable returns()
func (_Onchain *OnchainTransactor) MyDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "myDeposit")
}

// MyDeposit is a paid mutator transaction binding the contract method 0x2a096397.
//
// Solidity: function myDeposit() payable returns()
func (_Onchain *OnchainSession) MyDeposit() (*types.Transaction, error) {
	return _Onchain.Contract.MyDeposit(&_Onchain.TransactOpts)
}

// MyDeposit is a paid mutator transaction binding the contract method 0x2a096397.
//
// Solidity: function myDeposit() payable returns()
func (_Onchain *OnchainTransactorSession) MyDeposit() (*types.Transaction, error) {
	return _Onchain.Contract.MyDeposit(&_Onchain.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address _m) payable returns()
func (_Onchain *OnchainTransactor) Register(opts *bind.TransactOpts, _m common.Address) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "register", _m)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address _m) payable returns()
func (_Onchain *OnchainSession) Register(_m common.Address) (*types.Transaction, error) {
	return _Onchain.Contract.Register(&_Onchain.TransactOpts, _m)
}

// Register is a paid mutator transaction binding the contract method 0x4420e486.
//
// Solidity: function register(address _m) payable returns()
func (_Onchain *OnchainTransactorSession) Register(_m common.Address) (*types.Transaction, error) {
	return _Onchain.Contract.Register(&_Onchain.TransactOpts, _m)
}

// ReportMissingDeadline is a paid mutator transaction binding the contract method 0x78b32cf5.
//
// Solidity: function reportMissingDeadline(bytes16 batchID) returns()
func (_Onchain *OnchainTransactor) ReportMissingDeadline(opts *bind.TransactOpts, batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "reportMissingDeadline", batchID)
}

// ReportMissingDeadline is a paid mutator transaction binding the contract method 0x78b32cf5.
//
// Solidity: function reportMissingDeadline(bytes16 batchID) returns()
func (_Onchain *OnchainSession) ReportMissingDeadline(batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.ReportMissingDeadline(&_Onchain.TransactOpts, batchID)
}

// ReportMissingDeadline is a paid mutator transaction binding the contract method 0x78b32cf5.
//
// Solidity: function reportMissingDeadline(bytes16 batchID) returns()
func (_Onchain *OnchainTransactorSession) ReportMissingDeadline(batchID [16]byte) (*types.Transaction, error) {
	return _Onchain.Contract.ReportMissingDeadline(&_Onchain.TransactOpts, batchID)
}

// SendBatch is a paid mutator transaction binding the contract method 0x3005d34c.
//
// Solidity: function sendBatch(bytes16 batchID, uint256 price, uint256 amount, bool side, address owner, bytes sign) returns()
func (_Onchain *OnchainTransactor) SendBatch(opts *bind.TransactOpts, batchID [16]byte, price *big.Int, amount *big.Int, side bool, owner common.Address, sign []byte) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "sendBatch", batchID, price, amount, side, owner, sign)
}

// SendBatch is a paid mutator transaction binding the contract method 0x3005d34c.
//
// Solidity: function sendBatch(bytes16 batchID, uint256 price, uint256 amount, bool side, address owner, bytes sign) returns()
func (_Onchain *OnchainSession) SendBatch(batchID [16]byte, price *big.Int, amount *big.Int, side bool, owner common.Address, sign []byte) (*types.Transaction, error) {
	return _Onchain.Contract.SendBatch(&_Onchain.TransactOpts, batchID, price, amount, side, owner, sign)
}

// SendBatch is a paid mutator transaction binding the contract method 0x3005d34c.
//
// Solidity: function sendBatch(bytes16 batchID, uint256 price, uint256 amount, bool side, address owner, bytes sign) returns()
func (_Onchain *OnchainTransactorSession) SendBatch(batchID [16]byte, price *big.Int, amount *big.Int, side bool, owner common.Address, sign []byte) (*types.Transaction, error) {
	return _Onchain.Contract.SendBatch(&_Onchain.TransactOpts, batchID, price, amount, side, owner, sign)
}

// SubmitOrderDetails is a paid mutator transaction binding the contract method 0x0ffde4c5.
//
// Solidity: function submitOrderDetails(bytes16 batchID, (uint256,uint256,bool,bytes16,bytes32,bytes32,address)[] _ords) returns()
func (_Onchain *OnchainTransactor) SubmitOrderDetails(opts *bind.TransactOpts, batchID [16]byte, _ords []OnchainOrder) (*types.Transaction, error) {
	return _Onchain.contract.Transact(opts, "submitOrderDetails", batchID, _ords)
}

// SubmitOrderDetails is a paid mutator transaction binding the contract method 0x0ffde4c5.
//
// Solidity: function submitOrderDetails(bytes16 batchID, (uint256,uint256,bool,bytes16,bytes32,bytes32,address)[] _ords) returns()
func (_Onchain *OnchainSession) SubmitOrderDetails(batchID [16]byte, _ords []OnchainOrder) (*types.Transaction, error) {
	return _Onchain.Contract.SubmitOrderDetails(&_Onchain.TransactOpts, batchID, _ords)
}

// SubmitOrderDetails is a paid mutator transaction binding the contract method 0x0ffde4c5.
//
// Solidity: function submitOrderDetails(bytes16 batchID, (uint256,uint256,bool,bytes16,bytes32,bytes32,address)[] _ords) returns()
func (_Onchain *OnchainTransactorSession) SubmitOrderDetails(batchID [16]byte, _ords []OnchainOrder) (*types.Transaction, error) {
	return _Onchain.Contract.SubmitOrderDetails(&_Onchain.TransactOpts, batchID, _ords)
}

// OnchainAcceptBatchIterator is returned from FilterAcceptBatch and is used to iterate over the raw logs and unpacked data for AcceptBatch events raised by the Onchain contract.
type OnchainAcceptBatchIterator struct {
	Event *OnchainAcceptBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainAcceptBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainAcceptBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainAcceptBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainAcceptBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainAcceptBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainAcceptBatch represents a AcceptBatch event raised by the Onchain contract.
type OnchainAcceptBatch struct {
	Arg0 [16]byte
	Arg1 *big.Int
	Arg2 *big.Int
	Arg3 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAcceptBatch is a free log retrieval operation binding the contract event 0x4e69af47be64b65d6f6b732189c85581fa38a2b52d8065e302b00075701f6cfd.
//
// Solidity: event AcceptBatch(bytes16 arg0, uint256 arg1, uint256 arg2, bool arg3)
func (_Onchain *OnchainFilterer) FilterAcceptBatch(opts *bind.FilterOpts) (*OnchainAcceptBatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "AcceptBatch")
	if err != nil {
		return nil, err
	}
	return &OnchainAcceptBatchIterator{contract: _Onchain.contract, event: "AcceptBatch", logs: logs, sub: sub}, nil
}

// WatchAcceptBatch is a free log subscription operation binding the contract event 0x4e69af47be64b65d6f6b732189c85581fa38a2b52d8065e302b00075701f6cfd.
//
// Solidity: event AcceptBatch(bytes16 arg0, uint256 arg1, uint256 arg2, bool arg3)
func (_Onchain *OnchainFilterer) WatchAcceptBatch(opts *bind.WatchOpts, sink chan<- *OnchainAcceptBatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "AcceptBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainAcceptBatch)
				if err := _Onchain.contract.UnpackLog(event, "AcceptBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptBatch is a log parse operation binding the contract event 0x4e69af47be64b65d6f6b732189c85581fa38a2b52d8065e302b00075701f6cfd.
//
// Solidity: event AcceptBatch(bytes16 arg0, uint256 arg1, uint256 arg2, bool arg3)
func (_Onchain *OnchainFilterer) ParseAcceptBatch(log types.Log) (*OnchainAcceptBatch, error) {
	event := new(OnchainAcceptBatch)
	if err := _Onchain.contract.UnpackLog(event, "AcceptBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainBatchMatchAmountAndProfitIterator is returned from FilterBatchMatchAmountAndProfit and is used to iterate over the raw logs and unpacked data for BatchMatchAmountAndProfit events raised by the Onchain contract.
type OnchainBatchMatchAmountAndProfitIterator struct {
	Event *OnchainBatchMatchAmountAndProfit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainBatchMatchAmountAndProfitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainBatchMatchAmountAndProfit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainBatchMatchAmountAndProfit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainBatchMatchAmountAndProfitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainBatchMatchAmountAndProfitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainBatchMatchAmountAndProfit represents a BatchMatchAmountAndProfit event raised by the Onchain contract.
type OnchainBatchMatchAmountAndProfit struct {
	Arg0 *big.Int
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterBatchMatchAmountAndProfit is a free log retrieval operation binding the contract event 0x99869490c192d9713fc1773145a18b2ef86613027655b38e98d987459bca508c.
//
// Solidity: event BatchMatchAmountAndProfit(uint256 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) FilterBatchMatchAmountAndProfit(opts *bind.FilterOpts) (*OnchainBatchMatchAmountAndProfitIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "BatchMatchAmountAndProfit")
	if err != nil {
		return nil, err
	}
	return &OnchainBatchMatchAmountAndProfitIterator{contract: _Onchain.contract, event: "BatchMatchAmountAndProfit", logs: logs, sub: sub}, nil
}

// WatchBatchMatchAmountAndProfit is a free log subscription operation binding the contract event 0x99869490c192d9713fc1773145a18b2ef86613027655b38e98d987459bca508c.
//
// Solidity: event BatchMatchAmountAndProfit(uint256 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) WatchBatchMatchAmountAndProfit(opts *bind.WatchOpts, sink chan<- *OnchainBatchMatchAmountAndProfit) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "BatchMatchAmountAndProfit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainBatchMatchAmountAndProfit)
				if err := _Onchain.contract.UnpackLog(event, "BatchMatchAmountAndProfit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchMatchAmountAndProfit is a log parse operation binding the contract event 0x99869490c192d9713fc1773145a18b2ef86613027655b38e98d987459bca508c.
//
// Solidity: event BatchMatchAmountAndProfit(uint256 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) ParseBatchMatchAmountAndProfit(log types.Log) (*OnchainBatchMatchAmountAndProfit, error) {
	event := new(OnchainBatchMatchAmountAndProfit)
	if err := _Onchain.contract.UnpackLog(event, "BatchMatchAmountAndProfit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainBatchRawProfitIterator is returned from FilterBatchRawProfit and is used to iterate over the raw logs and unpacked data for BatchRawProfit events raised by the Onchain contract.
type OnchainBatchRawProfitIterator struct {
	Event *OnchainBatchRawProfit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainBatchRawProfitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainBatchRawProfit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainBatchRawProfit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainBatchRawProfitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainBatchRawProfitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainBatchRawProfit represents a BatchRawProfit event raised by the Onchain contract.
type OnchainBatchRawProfit struct {
	Arg0 [16]byte
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterBatchRawProfit is a free log retrieval operation binding the contract event 0xe815d3dc17143b69b6fb9905c4f0a0da9afaecfbda798ab64633b254ce53017a.
//
// Solidity: event BatchRawProfit(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) FilterBatchRawProfit(opts *bind.FilterOpts) (*OnchainBatchRawProfitIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "BatchRawProfit")
	if err != nil {
		return nil, err
	}
	return &OnchainBatchRawProfitIterator{contract: _Onchain.contract, event: "BatchRawProfit", logs: logs, sub: sub}, nil
}

// WatchBatchRawProfit is a free log subscription operation binding the contract event 0xe815d3dc17143b69b6fb9905c4f0a0da9afaecfbda798ab64633b254ce53017a.
//
// Solidity: event BatchRawProfit(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) WatchBatchRawProfit(opts *bind.WatchOpts, sink chan<- *OnchainBatchRawProfit) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "BatchRawProfit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainBatchRawProfit)
				if err := _Onchain.contract.UnpackLog(event, "BatchRawProfit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchRawProfit is a log parse operation binding the contract event 0xe815d3dc17143b69b6fb9905c4f0a0da9afaecfbda798ab64633b254ce53017a.
//
// Solidity: event BatchRawProfit(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) ParseBatchRawProfit(log types.Log) (*OnchainBatchRawProfit, error) {
	event := new(OnchainBatchRawProfit)
	if err := _Onchain.contract.UnpackLog(event, "BatchRawProfit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainBatchTimestampIterator is returned from FilterBatchTimestamp and is used to iterate over the raw logs and unpacked data for BatchTimestamp events raised by the Onchain contract.
type OnchainBatchTimestampIterator struct {
	Event *OnchainBatchTimestamp // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainBatchTimestampIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainBatchTimestamp)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainBatchTimestamp)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainBatchTimestampIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainBatchTimestampIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainBatchTimestamp represents a BatchTimestamp event raised by the Onchain contract.
type OnchainBatchTimestamp struct {
	Arg0 [16]byte
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterBatchTimestamp is a free log retrieval operation binding the contract event 0x6f79b986cb819220a660d201db3b4b62109e66c0e2e406a8ca4685376879f668.
//
// Solidity: event BatchTimestamp(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) FilterBatchTimestamp(opts *bind.FilterOpts) (*OnchainBatchTimestampIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "BatchTimestamp")
	if err != nil {
		return nil, err
	}
	return &OnchainBatchTimestampIterator{contract: _Onchain.contract, event: "BatchTimestamp", logs: logs, sub: sub}, nil
}

// WatchBatchTimestamp is a free log subscription operation binding the contract event 0x6f79b986cb819220a660d201db3b4b62109e66c0e2e406a8ca4685376879f668.
//
// Solidity: event BatchTimestamp(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) WatchBatchTimestamp(opts *bind.WatchOpts, sink chan<- *OnchainBatchTimestamp) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "BatchTimestamp")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainBatchTimestamp)
				if err := _Onchain.contract.UnpackLog(event, "BatchTimestamp", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchTimestamp is a log parse operation binding the contract event 0x6f79b986cb819220a660d201db3b4b62109e66c0e2e406a8ca4685376879f668.
//
// Solidity: event BatchTimestamp(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) ParseBatchTimestamp(log types.Log) (*OnchainBatchTimestamp, error) {
	event := new(OnchainBatchTimestamp)
	if err := _Onchain.contract.UnpackLog(event, "BatchTimestamp", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainFullfilMatchIterator is returned from FilterFullfilMatch and is used to iterate over the raw logs and unpacked data for FullfilMatch events raised by the Onchain contract.
type OnchainFullfilMatchIterator struct {
	Event *OnchainFullfilMatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainFullfilMatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainFullfilMatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainFullfilMatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainFullfilMatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainFullfilMatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainFullfilMatch represents a FullfilMatch event raised by the Onchain contract.
type OnchainFullfilMatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterFullfilMatch is a free log retrieval operation binding the contract event 0x57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965.
//
// Solidity: event FullfilMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterFullfilMatch(opts *bind.FilterOpts) (*OnchainFullfilMatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "FullfilMatch")
	if err != nil {
		return nil, err
	}
	return &OnchainFullfilMatchIterator{contract: _Onchain.contract, event: "FullfilMatch", logs: logs, sub: sub}, nil
}

// WatchFullfilMatch is a free log subscription operation binding the contract event 0x57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965.
//
// Solidity: event FullfilMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchFullfilMatch(opts *bind.WatchOpts, sink chan<- *OnchainFullfilMatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "FullfilMatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainFullfilMatch)
				if err := _Onchain.contract.UnpackLog(event, "FullfilMatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFullfilMatch is a log parse operation binding the contract event 0x57c1c352bdac3386003c09fd995913d2076b2fcd7da4e5b8c98e19c1b08ae965.
//
// Solidity: event FullfilMatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseFullfilMatch(log types.Log) (*OnchainFullfilMatch, error) {
	event := new(OnchainFullfilMatch)
	if err := _Onchain.contract.UnpackLog(event, "FullfilMatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainInvalidBatchIterator is returned from FilterInvalidBatch and is used to iterate over the raw logs and unpacked data for InvalidBatch events raised by the Onchain contract.
type OnchainInvalidBatchIterator struct {
	Event *OnchainInvalidBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainInvalidBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainInvalidBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainInvalidBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainInvalidBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainInvalidBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainInvalidBatch represents a InvalidBatch event raised by the Onchain contract.
type OnchainInvalidBatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterInvalidBatch is a free log retrieval operation binding the contract event 0xe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad748.
//
// Solidity: event InvalidBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterInvalidBatch(opts *bind.FilterOpts) (*OnchainInvalidBatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "InvalidBatch")
	if err != nil {
		return nil, err
	}
	return &OnchainInvalidBatchIterator{contract: _Onchain.contract, event: "InvalidBatch", logs: logs, sub: sub}, nil
}

// WatchInvalidBatch is a free log subscription operation binding the contract event 0xe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad748.
//
// Solidity: event InvalidBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchInvalidBatch(opts *bind.WatchOpts, sink chan<- *OnchainInvalidBatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "InvalidBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainInvalidBatch)
				if err := _Onchain.contract.UnpackLog(event, "InvalidBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidBatch is a log parse operation binding the contract event 0xe869c471359d4723739042b0d5604804b6d0b9a42b9d7542594ac99ef4fad748.
//
// Solidity: event InvalidBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseInvalidBatch(log types.Log) (*OnchainInvalidBatch, error) {
	event := new(OnchainInvalidBatch)
	if err := _Onchain.contract.UnpackLog(event, "InvalidBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainInvalidOrderIterator is returned from FilterInvalidOrder and is used to iterate over the raw logs and unpacked data for InvalidOrder events raised by the Onchain contract.
type OnchainInvalidOrderIterator struct {
	Event *OnchainInvalidOrder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainInvalidOrderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainInvalidOrder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainInvalidOrder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainInvalidOrderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainInvalidOrderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainInvalidOrder represents a InvalidOrder event raised by the Onchain contract.
type OnchainInvalidOrder struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterInvalidOrder is a free log retrieval operation binding the contract event 0xbadcacd8461f108d807dc434f432301d58e336cb63f5ce877e5e6a9298785447.
//
// Solidity: event InvalidOrder(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterInvalidOrder(opts *bind.FilterOpts) (*OnchainInvalidOrderIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "InvalidOrder")
	if err != nil {
		return nil, err
	}
	return &OnchainInvalidOrderIterator{contract: _Onchain.contract, event: "InvalidOrder", logs: logs, sub: sub}, nil
}

// WatchInvalidOrder is a free log subscription operation binding the contract event 0xbadcacd8461f108d807dc434f432301d58e336cb63f5ce877e5e6a9298785447.
//
// Solidity: event InvalidOrder(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchInvalidOrder(opts *bind.WatchOpts, sink chan<- *OnchainInvalidOrder) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "InvalidOrder")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainInvalidOrder)
				if err := _Onchain.contract.UnpackLog(event, "InvalidOrder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvalidOrder is a log parse operation binding the contract event 0xbadcacd8461f108d807dc434f432301d58e336cb63f5ce877e5e6a9298785447.
//
// Solidity: event InvalidOrder(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseInvalidOrder(log types.Log) (*OnchainInvalidOrder, error) {
	event := new(OnchainInvalidOrder)
	if err := _Onchain.contract.UnpackLog(event, "InvalidOrder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogAddressIterator is returned from FilterLogAddress and is used to iterate over the raw logs and unpacked data for LogAddress events raised by the Onchain contract.
type OnchainLogAddressIterator struct {
	Event *OnchainLogAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogAddress represents a LogAddress event raised by the Onchain contract.
type OnchainLogAddress struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogAddress is a free log retrieval operation binding the contract event 0xb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a284.
//
// Solidity: event LogAddress(address arg0)
func (_Onchain *OnchainFilterer) FilterLogAddress(opts *bind.FilterOpts) (*OnchainLogAddressIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return &OnchainLogAddressIterator{contract: _Onchain.contract, event: "LogAddress", logs: logs, sub: sub}, nil
}

// WatchLogAddress is a free log subscription operation binding the contract event 0xb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a284.
//
// Solidity: event LogAddress(address arg0)
func (_Onchain *OnchainFilterer) WatchLogAddress(opts *bind.WatchOpts, sink chan<- *OnchainLogAddress) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogAddress)
				if err := _Onchain.contract.UnpackLog(event, "LogAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogAddress is a log parse operation binding the contract event 0xb123f68b8ba02b447d91a6629e121111b7dd6061ff418a60139c8bf00522a284.
//
// Solidity: event LogAddress(address arg0)
func (_Onchain *OnchainFilterer) ParseLogAddress(log types.Log) (*OnchainLogAddress, error) {
	event := new(OnchainLogAddress)
	if err := _Onchain.contract.UnpackLog(event, "LogAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogBytesIterator is returned from FilterLogBytes and is used to iterate over the raw logs and unpacked data for LogBytes events raised by the Onchain contract.
type OnchainLogBytesIterator struct {
	Event *OnchainLogBytes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogBytesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogBytes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogBytes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogBytesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogBytesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogBytes represents a LogBytes event raised by the Onchain contract.
type OnchainLogBytes struct {
	Arg0 []byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes is a free log retrieval operation binding the contract event 0x532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a5.
//
// Solidity: event LogBytes(bytes arg0)
func (_Onchain *OnchainFilterer) FilterLogBytes(opts *bind.FilterOpts) (*OnchainLogBytesIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogBytes")
	if err != nil {
		return nil, err
	}
	return &OnchainLogBytesIterator{contract: _Onchain.contract, event: "LogBytes", logs: logs, sub: sub}, nil
}

// WatchLogBytes is a free log subscription operation binding the contract event 0x532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a5.
//
// Solidity: event LogBytes(bytes arg0)
func (_Onchain *OnchainFilterer) WatchLogBytes(opts *bind.WatchOpts, sink chan<- *OnchainLogBytes) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogBytes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogBytes)
				if err := _Onchain.contract.UnpackLog(event, "LogBytes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes is a log parse operation binding the contract event 0x532fd6ea96cfb78bb46e09279a26828b8b493de1a2b8b1ee1face527978a15a5.
//
// Solidity: event LogBytes(bytes arg0)
func (_Onchain *OnchainFilterer) ParseLogBytes(log types.Log) (*OnchainLogBytes, error) {
	event := new(OnchainLogBytes)
	if err := _Onchain.contract.UnpackLog(event, "LogBytes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogBytes16Iterator is returned from FilterLogBytes16 and is used to iterate over the raw logs and unpacked data for LogBytes16 events raised by the Onchain contract.
type OnchainLogBytes16Iterator struct {
	Event *OnchainLogBytes16 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogBytes16Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogBytes16)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogBytes16)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogBytes16Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogBytes16Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogBytes16 represents a LogBytes16 event raised by the Onchain contract.
type OnchainLogBytes16 struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes16 is a free log retrieval operation binding the contract event 0x9f7a2df33c1c92d195340c1708bc1c78ec4aed6cac45f305a0c9c9dcb5871207.
//
// Solidity: event LogBytes16(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterLogBytes16(opts *bind.FilterOpts) (*OnchainLogBytes16Iterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogBytes16")
	if err != nil {
		return nil, err
	}
	return &OnchainLogBytes16Iterator{contract: _Onchain.contract, event: "LogBytes16", logs: logs, sub: sub}, nil
}

// WatchLogBytes16 is a free log subscription operation binding the contract event 0x9f7a2df33c1c92d195340c1708bc1c78ec4aed6cac45f305a0c9c9dcb5871207.
//
// Solidity: event LogBytes16(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchLogBytes16(opts *bind.WatchOpts, sink chan<- *OnchainLogBytes16) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogBytes16")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogBytes16)
				if err := _Onchain.contract.UnpackLog(event, "LogBytes16", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes16 is a log parse operation binding the contract event 0x9f7a2df33c1c92d195340c1708bc1c78ec4aed6cac45f305a0c9c9dcb5871207.
//
// Solidity: event LogBytes16(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseLogBytes16(log types.Log) (*OnchainLogBytes16, error) {
	event := new(OnchainLogBytes16)
	if err := _Onchain.contract.UnpackLog(event, "LogBytes16", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogBytes32Iterator is returned from FilterLogBytes32 and is used to iterate over the raw logs and unpacked data for LogBytes32 events raised by the Onchain contract.
type OnchainLogBytes32Iterator struct {
	Event *OnchainLogBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogBytes32 represents a LogBytes32 event raised by the Onchain contract.
type OnchainLogBytes32 struct {
	Arg0 [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogBytes32 is a free log retrieval operation binding the contract event 0x009fd52f05c0ded31d6fb0ee580b923f85e99cf1a5a1da342f25e73c45829c83.
//
// Solidity: event LogBytes32(bytes32 arg0)
func (_Onchain *OnchainFilterer) FilterLogBytes32(opts *bind.FilterOpts) (*OnchainLogBytes32Iterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return &OnchainLogBytes32Iterator{contract: _Onchain.contract, event: "LogBytes32", logs: logs, sub: sub}, nil
}

// WatchLogBytes32 is a free log subscription operation binding the contract event 0x009fd52f05c0ded31d6fb0ee580b923f85e99cf1a5a1da342f25e73c45829c83.
//
// Solidity: event LogBytes32(bytes32 arg0)
func (_Onchain *OnchainFilterer) WatchLogBytes32(opts *bind.WatchOpts, sink chan<- *OnchainLogBytes32) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogBytes32)
				if err := _Onchain.contract.UnpackLog(event, "LogBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogBytes32 is a log parse operation binding the contract event 0x009fd52f05c0ded31d6fb0ee580b923f85e99cf1a5a1da342f25e73c45829c83.
//
// Solidity: event LogBytes32(bytes32 arg0)
func (_Onchain *OnchainFilterer) ParseLogBytes32(log types.Log) (*OnchainLogBytes32, error) {
	event := new(OnchainLogBytes32)
	if err := _Onchain.contract.UnpackLog(event, "LogBytes32", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogRecoverErrorIterator is returned from FilterLogRecoverError and is used to iterate over the raw logs and unpacked data for LogRecoverError events raised by the Onchain contract.
type OnchainLogRecoverErrorIterator struct {
	Event *OnchainLogRecoverError // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogRecoverErrorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogRecoverError)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogRecoverError)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogRecoverErrorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogRecoverErrorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogRecoverError represents a LogRecoverError event raised by the Onchain contract.
type OnchainLogRecoverError struct {
	Arg0 uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogRecoverError is a free log retrieval operation binding the contract event 0x9d91e3e6af4967817419b36cf53fb2a60335d23ebe396ea4f0da7ceb02a4f831.
//
// Solidity: event LogRecoverError(uint8 arg0)
func (_Onchain *OnchainFilterer) FilterLogRecoverError(opts *bind.FilterOpts) (*OnchainLogRecoverErrorIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogRecoverError")
	if err != nil {
		return nil, err
	}
	return &OnchainLogRecoverErrorIterator{contract: _Onchain.contract, event: "LogRecoverError", logs: logs, sub: sub}, nil
}

// WatchLogRecoverError is a free log subscription operation binding the contract event 0x9d91e3e6af4967817419b36cf53fb2a60335d23ebe396ea4f0da7ceb02a4f831.
//
// Solidity: event LogRecoverError(uint8 arg0)
func (_Onchain *OnchainFilterer) WatchLogRecoverError(opts *bind.WatchOpts, sink chan<- *OnchainLogRecoverError) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogRecoverError")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogRecoverError)
				if err := _Onchain.contract.UnpackLog(event, "LogRecoverError", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogRecoverError is a log parse operation binding the contract event 0x9d91e3e6af4967817419b36cf53fb2a60335d23ebe396ea4f0da7ceb02a4f831.
//
// Solidity: event LogRecoverError(uint8 arg0)
func (_Onchain *OnchainFilterer) ParseLogRecoverError(log types.Log) (*OnchainLogRecoverError, error) {
	event := new(OnchainLogRecoverError)
	if err := _Onchain.contract.UnpackLog(event, "LogRecoverError", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogStringIterator is returned from FilterLogString and is used to iterate over the raw logs and unpacked data for LogString events raised by the Onchain contract.
type OnchainLogStringIterator struct {
	Event *OnchainLogString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogString represents a LogString event raised by the Onchain contract.
type OnchainLogString struct {
	Arg0 string
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogString is a free log retrieval operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string arg0)
func (_Onchain *OnchainFilterer) FilterLogString(opts *bind.FilterOpts) (*OnchainLogStringIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogString")
	if err != nil {
		return nil, err
	}
	return &OnchainLogStringIterator{contract: _Onchain.contract, event: "LogString", logs: logs, sub: sub}, nil
}

// WatchLogString is a free log subscription operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string arg0)
func (_Onchain *OnchainFilterer) WatchLogString(opts *bind.WatchOpts, sink chan<- *OnchainLogString) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogString)
				if err := _Onchain.contract.UnpackLog(event, "LogString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogString is a log parse operation binding the contract event 0xa95e6e2a182411e7a6f9ed114a85c3761d87f9b8f453d842c71235aa64fff99f.
//
// Solidity: event LogString(string arg0)
func (_Onchain *OnchainFilterer) ParseLogString(log types.Log) (*OnchainLogString, error) {
	event := new(OnchainLogString)
	if err := _Onchain.contract.UnpackLog(event, "LogString", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainLogUint256Iterator is returned from FilterLogUint256 and is used to iterate over the raw logs and unpacked data for LogUint256 events raised by the Onchain contract.
type OnchainLogUint256Iterator struct {
	Event *OnchainLogUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainLogUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainLogUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainLogUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainLogUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainLogUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainLogUint256 represents a LogUint256 event raised by the Onchain contract.
type OnchainLogUint256 struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterLogUint256 is a free log retrieval operation binding the contract event 0x535266f26566acd2ef175615d9f1140b36f149b810b33fb93143236a69912c32.
//
// Solidity: event LogUint256(uint256 arg0)
func (_Onchain *OnchainFilterer) FilterLogUint256(opts *bind.FilterOpts) (*OnchainLogUint256Iterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return &OnchainLogUint256Iterator{contract: _Onchain.contract, event: "LogUint256", logs: logs, sub: sub}, nil
}

// WatchLogUint256 is a free log subscription operation binding the contract event 0x535266f26566acd2ef175615d9f1140b36f149b810b33fb93143236a69912c32.
//
// Solidity: event LogUint256(uint256 arg0)
func (_Onchain *OnchainFilterer) WatchLogUint256(opts *bind.WatchOpts, sink chan<- *OnchainLogUint256) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "LogUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainLogUint256)
				if err := _Onchain.contract.UnpackLog(event, "LogUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogUint256 is a log parse operation binding the contract event 0x535266f26566acd2ef175615d9f1140b36f149b810b33fb93143236a69912c32.
//
// Solidity: event LogUint256(uint256 arg0)
func (_Onchain *OnchainFilterer) ParseLogUint256(log types.Log) (*OnchainLogUint256, error) {
	event := new(OnchainLogUint256)
	if err := _Onchain.contract.UnpackLog(event, "LogUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainMatchedPriceIterator is returned from FilterMatchedPrice and is used to iterate over the raw logs and unpacked data for MatchedPrice events raised by the Onchain contract.
type OnchainMatchedPriceIterator struct {
	Event *OnchainMatchedPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainMatchedPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainMatchedPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainMatchedPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainMatchedPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainMatchedPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainMatchedPrice represents a MatchedPrice event raised by the Onchain contract.
type OnchainMatchedPrice struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterMatchedPrice is a free log retrieval operation binding the contract event 0x21331f5f70f88dca9a2b9b06c6cf44878ab0c9e6a395bca9385b8de7163fb3e7.
//
// Solidity: event MatchedPrice(uint256 arg0)
func (_Onchain *OnchainFilterer) FilterMatchedPrice(opts *bind.FilterOpts) (*OnchainMatchedPriceIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "MatchedPrice")
	if err != nil {
		return nil, err
	}
	return &OnchainMatchedPriceIterator{contract: _Onchain.contract, event: "MatchedPrice", logs: logs, sub: sub}, nil
}

// WatchMatchedPrice is a free log subscription operation binding the contract event 0x21331f5f70f88dca9a2b9b06c6cf44878ab0c9e6a395bca9385b8de7163fb3e7.
//
// Solidity: event MatchedPrice(uint256 arg0)
func (_Onchain *OnchainFilterer) WatchMatchedPrice(opts *bind.WatchOpts, sink chan<- *OnchainMatchedPrice) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "MatchedPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainMatchedPrice)
				if err := _Onchain.contract.UnpackLog(event, "MatchedPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMatchedPrice is a log parse operation binding the contract event 0x21331f5f70f88dca9a2b9b06c6cf44878ab0c9e6a395bca9385b8de7163fb3e7.
//
// Solidity: event MatchedPrice(uint256 arg0)
func (_Onchain *OnchainFilterer) ParseMatchedPrice(log types.Log) (*OnchainMatchedPrice, error) {
	event := new(OnchainMatchedPrice)
	if err := _Onchain.contract.UnpackLog(event, "MatchedPrice", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainPunishMatcherIterator is returned from FilterPunishMatcher and is used to iterate over the raw logs and unpacked data for PunishMatcher events raised by the Onchain contract.
type OnchainPunishMatcherIterator struct {
	Event *OnchainPunishMatcher // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainPunishMatcherIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainPunishMatcher)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainPunishMatcher)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainPunishMatcherIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainPunishMatcherIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainPunishMatcher represents a PunishMatcher event raised by the Onchain contract.
type OnchainPunishMatcher struct {
	Arg0 common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterPunishMatcher is a free log retrieval operation binding the contract event 0x5d03dcef971a6d5b97413cad12abae79f43e9422a6c38e8bc70592b18937ba23.
//
// Solidity: event PunishMatcher(address arg0)
func (_Onchain *OnchainFilterer) FilterPunishMatcher(opts *bind.FilterOpts) (*OnchainPunishMatcherIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "PunishMatcher")
	if err != nil {
		return nil, err
	}
	return &OnchainPunishMatcherIterator{contract: _Onchain.contract, event: "PunishMatcher", logs: logs, sub: sub}, nil
}

// WatchPunishMatcher is a free log subscription operation binding the contract event 0x5d03dcef971a6d5b97413cad12abae79f43e9422a6c38e8bc70592b18937ba23.
//
// Solidity: event PunishMatcher(address arg0)
func (_Onchain *OnchainFilterer) WatchPunishMatcher(opts *bind.WatchOpts, sink chan<- *OnchainPunishMatcher) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "PunishMatcher")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainPunishMatcher)
				if err := _Onchain.contract.UnpackLog(event, "PunishMatcher", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePunishMatcher is a log parse operation binding the contract event 0x5d03dcef971a6d5b97413cad12abae79f43e9422a6c38e8bc70592b18937ba23.
//
// Solidity: event PunishMatcher(address arg0)
func (_Onchain *OnchainFilterer) ParsePunishMatcher(log types.Log) (*OnchainPunishMatcher, error) {
	event := new(OnchainPunishMatcher)
	if err := _Onchain.contract.UnpackLog(event, "PunishMatcher", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainReceivedBatchDetailsIterator is returned from FilterReceivedBatchDetails and is used to iterate over the raw logs and unpacked data for ReceivedBatchDetails events raised by the Onchain contract.
type OnchainReceivedBatchDetailsIterator struct {
	Event *OnchainReceivedBatchDetails // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainReceivedBatchDetailsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainReceivedBatchDetails)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainReceivedBatchDetails)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainReceivedBatchDetailsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainReceivedBatchDetailsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainReceivedBatchDetails represents a ReceivedBatchDetails event raised by the Onchain contract.
type OnchainReceivedBatchDetails struct {
	Arg0 [16]byte
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReceivedBatchDetails is a free log retrieval operation binding the contract event 0xd55425a5fdfbfd51b556071465ab893c0ed4d05807e813f5f490cac8a93b316b.
//
// Solidity: event ReceivedBatchDetails(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) FilterReceivedBatchDetails(opts *bind.FilterOpts) (*OnchainReceivedBatchDetailsIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "ReceivedBatchDetails")
	if err != nil {
		return nil, err
	}
	return &OnchainReceivedBatchDetailsIterator{contract: _Onchain.contract, event: "ReceivedBatchDetails", logs: logs, sub: sub}, nil
}

// WatchReceivedBatchDetails is a free log subscription operation binding the contract event 0xd55425a5fdfbfd51b556071465ab893c0ed4d05807e813f5f490cac8a93b316b.
//
// Solidity: event ReceivedBatchDetails(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) WatchReceivedBatchDetails(opts *bind.WatchOpts, sink chan<- *OnchainReceivedBatchDetails) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "ReceivedBatchDetails")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainReceivedBatchDetails)
				if err := _Onchain.contract.UnpackLog(event, "ReceivedBatchDetails", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceivedBatchDetails is a log parse operation binding the contract event 0xd55425a5fdfbfd51b556071465ab893c0ed4d05807e813f5f490cac8a93b316b.
//
// Solidity: event ReceivedBatchDetails(bytes16 arg0, uint256 arg1)
func (_Onchain *OnchainFilterer) ParseReceivedBatchDetails(log types.Log) (*OnchainReceivedBatchDetails, error) {
	event := new(OnchainReceivedBatchDetails)
	if err := _Onchain.contract.UnpackLog(event, "ReceivedBatchDetails", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainRemoveBatchOutOfDateIterator is returned from FilterRemoveBatchOutOfDate and is used to iterate over the raw logs and unpacked data for RemoveBatchOutOfDate events raised by the Onchain contract.
type OnchainRemoveBatchOutOfDateIterator struct {
	Event *OnchainRemoveBatchOutOfDate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainRemoveBatchOutOfDateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainRemoveBatchOutOfDate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainRemoveBatchOutOfDate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainRemoveBatchOutOfDateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainRemoveBatchOutOfDateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainRemoveBatchOutOfDate represents a RemoveBatchOutOfDate event raised by the Onchain contract.
type OnchainRemoveBatchOutOfDate struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemoveBatchOutOfDate is a free log retrieval operation binding the contract event 0xef2d1181ef6c5750f7ef1076cc112a454f5bf01f65b8e40daeb7390d2b660220.
//
// Solidity: event RemoveBatchOutOfDate(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterRemoveBatchOutOfDate(opts *bind.FilterOpts) (*OnchainRemoveBatchOutOfDateIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "RemoveBatchOutOfDate")
	if err != nil {
		return nil, err
	}
	return &OnchainRemoveBatchOutOfDateIterator{contract: _Onchain.contract, event: "RemoveBatchOutOfDate", logs: logs, sub: sub}, nil
}

// WatchRemoveBatchOutOfDate is a free log subscription operation binding the contract event 0xef2d1181ef6c5750f7ef1076cc112a454f5bf01f65b8e40daeb7390d2b660220.
//
// Solidity: event RemoveBatchOutOfDate(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchRemoveBatchOutOfDate(opts *bind.WatchOpts, sink chan<- *OnchainRemoveBatchOutOfDate) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "RemoveBatchOutOfDate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainRemoveBatchOutOfDate)
				if err := _Onchain.contract.UnpackLog(event, "RemoveBatchOutOfDate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveBatchOutOfDate is a log parse operation binding the contract event 0xef2d1181ef6c5750f7ef1076cc112a454f5bf01f65b8e40daeb7390d2b660220.
//
// Solidity: event RemoveBatchOutOfDate(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseRemoveBatchOutOfDate(log types.Log) (*OnchainRemoveBatchOutOfDate, error) {
	event := new(OnchainRemoveBatchOutOfDate)
	if err := _Onchain.contract.UnpackLog(event, "RemoveBatchOutOfDate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OnchainRevertBatchIterator is returned from FilterRevertBatch and is used to iterate over the raw logs and unpacked data for RevertBatch events raised by the Onchain contract.
type OnchainRevertBatchIterator struct {
	Event *OnchainRevertBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OnchainRevertBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OnchainRevertBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OnchainRevertBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OnchainRevertBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OnchainRevertBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OnchainRevertBatch represents a RevertBatch event raised by the Onchain contract.
type OnchainRevertBatch struct {
	Arg0 [16]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRevertBatch is a free log retrieval operation binding the contract event 0xf335387fffae8d4c523007d8c373bffc677e94ca97652a6dabecea00f48e4dd6.
//
// Solidity: event RevertBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) FilterRevertBatch(opts *bind.FilterOpts) (*OnchainRevertBatchIterator, error) {

	logs, sub, err := _Onchain.contract.FilterLogs(opts, "RevertBatch")
	if err != nil {
		return nil, err
	}
	return &OnchainRevertBatchIterator{contract: _Onchain.contract, event: "RevertBatch", logs: logs, sub: sub}, nil
}

// WatchRevertBatch is a free log subscription operation binding the contract event 0xf335387fffae8d4c523007d8c373bffc677e94ca97652a6dabecea00f48e4dd6.
//
// Solidity: event RevertBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) WatchRevertBatch(opts *bind.WatchOpts, sink chan<- *OnchainRevertBatch) (event.Subscription, error) {

	logs, sub, err := _Onchain.contract.WatchLogs(opts, "RevertBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OnchainRevertBatch)
				if err := _Onchain.contract.UnpackLog(event, "RevertBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRevertBatch is a log parse operation binding the contract event 0xf335387fffae8d4c523007d8c373bffc677e94ca97652a6dabecea00f48e4dd6.
//
// Solidity: event RevertBatch(bytes16 arg0)
func (_Onchain *OnchainFilterer) ParseRevertBatch(log types.Log) (*OnchainRevertBatch, error) {
	event := new(OnchainRevertBatch)
	if err := _Onchain.contract.UnpackLog(event, "RevertBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
